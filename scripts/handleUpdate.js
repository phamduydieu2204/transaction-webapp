import { getConstants } from './constants.js';

export async function handleUpdate(
  userInfo,
  currentEditTransactionId,
  transactionList,
  loadTransactions,
  handleReset,
  showProcessingModal,
  showResultModal,
  getConstants,
  updateTable,
  formatDate,
  editTransaction,
  deleteTransaction,
  viewTransaction,
  fetchSoftwareList,
  updatePackageList,
  updateAccountList
) {
  showProcessingModal("ƒêang c·∫≠p nh·∫≠t giao d·ªãch...");
  const { BACKEND_URL } = getConstants();

  if (!userInfo) {
    showResultModal("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", false);
    return;
  }

  if (currentEditTransactionId === null) {
    showResultModal("Vui l√≤ng ch·ªçn m·ªôt giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a!", false);
    return;
  }

  const loadResult = await loadTransactions(userInfo, updateTable, formatDate, editTransaction, deleteTransaction, viewTransaction);
  if (loadResult.status === "error") {
    showResultModal(loadResult.message, false);
    return;
  }

  const transaction = transactionList.find(t => t.transactionId === currentEditTransactionId);
  if (!transaction) {
    showResultModal("Giao d·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a. Vui l√≤ng th·ª≠ l·∫°i!", false);
    handleReset(fetchSoftwareList, showProcessingModal, showResultModal, window.todayFormatted, updatePackageList, updateAccountList);
    return;
  }

  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  const requiredFields = {
    customerEmail: "Email kh√°ch h√†ng",
    customerName: "T√™n kh√°ch h√†ng", 
    customerPhone: "Li√™n h·ªá",
    transactionDate: "Ng√†y giao d·ªãch",
    transactionType: "Lo·∫°i giao d·ªãch",
    duration: "S·ªë th√°ng ƒëƒÉng k√Ω",
    startDate: "Ng√†y b·∫Øt ƒë·∫ßu",
    softwareName: "T√™n ph·∫ßn m·ªÅm",
    softwarePackage: "G√≥i ph·∫ßn m·ªÅm",
    accountName: "T√™n t√†i kho·∫£n",
    revenue: "Doanh thu"
  };

  for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
    const element = document.getElementById(fieldId);
    if (!element) {
      console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${fieldId}`);
      continue;
    }
    
    const value = element.value;
    
    // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho c√°c tr∆∞·ªùng s·ªë
    if (fieldId === 'revenue' || fieldId === 'duration') {
      const numValue = parseFloat(value);
      if (isNaN(numValue) || numValue <= 0) {
        showResultModal("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc, vui l√≤ng ki·ªÉm tra l·∫°i", false);
        element.focus();
        return;
      }
    } else {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng text/select
      if (!value || value.trim() === "" || value === "0") {
        showResultModal("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc, vui l√≤ng ki·ªÉm tra l·∫°i", false);
        element.focus();
        return;
      }
    }
  }

  const softwareNameElement = document.getElementById("softwareName");
  const softwarePackageElement = document.getElementById("softwarePackage");
  const accountNameElement = document.getElementById("accountName");

  if (!softwareNameElement || !softwarePackageElement || !accountNameElement) {
    showResultModal("Kh√¥ng t√¨m th·∫•y c√°c tr∆∞·ªùng d·ªØ li·ªáu tr√™n form. Vui l√≤ng th·ª≠ l·∫°i!", false);
    return;
  }

  const data = {
    action: "updateTransaction",
    transactionId: currentEditTransactionId,
    transactionType: document.getElementById("transactionType").value,
    transactionDate: document.getElementById("transactionDate").value,
    customerName: document.getElementById("customerName").value,
    customerEmail: document.getElementById("customerEmail").value.toLowerCase(),
    customerPhone: document.getElementById("customerPhone").value,
    duration: parseInt(document.getElementById("duration").value) || 0,
    startDate: document.getElementById("startDate").value,
    endDate: document.getElementById("endDate").value,
    deviceCount: parseInt(document.getElementById("deviceCount").value) || 0,
    softwareName: softwareNameElement.value,
    softwarePackage: softwarePackageElement.value,
    accountName: accountNameElement.value,
    revenue: parseFloat(document.getElementById("revenue").value) || 0,
    note: document.getElementById("note").value,
    tenNhanVien: transaction.tenNhanVien,
    maNhanVien: transaction.maNhanVien,
    editorTenNhanVien: userInfo.tenNhanVien,
    editorMaNhanVien: userInfo.maNhanVien,

    // ‚úÖ Truy·ªÅn quy·ªÅn m·ªõi
    duocSuaGiaoDichCuaAi: userInfo.duocSuaGiaoDichCuaAi || "ch·ªâ b·∫£n th√¢n"
  };

  console.log("üì§ D·ªØ li·ªáu c·∫≠p nh·∫≠t g·ª≠i ƒëi:", JSON.stringify(data, null, 2));

  try {
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    });

    const result = await response.json();

    if (result.status === "success") {
      handleReset(fetchSoftwareList, showProcessingModal, showResultModal, window.todayFormatted, updatePackageList, updateAccountList);
      await loadTransactions(userInfo, updateTable, formatDate, editTransaction, deleteTransaction, viewTransaction);
      window.loadTransactions();
      showResultModal("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!", true);
    } else {
      showResultModal(result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch!", false);
    }
  } catch (err) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t:", err);
    showResultModal(`L·ªói k·∫øt n·ªëi server: ${err.message}`, false);
  }
}
