import { getConstants } from './constants.js';
import { updateState } from './core/stateManager.js';
import { validateBeforeOperation } from './core/sessionValidator.js';
import { cacheManager } from './core/cacheManager.js';

export async function handleUpdate() {
  console.log("üîÑ handleUpdate ƒë∆∞·ª£c g·ªçi");
  
  // Validate session before updating transaction
  const sessionValid = await validateBeforeOperation();
  if (!sessionValid) {
    return;
  }
  
  // Ki·ªÉm tra currentEditTransactionId t·ª´ window v√† state
  const windowId = window.currentEditTransactionId;
  const stateId = window.getState ? window.getState().currentEditTransactionId : null;
  const currentEditTransactionId = windowId || stateId;
  
  console.log("üîç Current edit IDs:", { windowId, stateId, currentEditTransactionId });
  
  if (!currentEditTransactionId) {
    console.error("‚ùå Kh√¥ng c√≥ giao d·ªãch n√†o ƒëang ƒë∆∞·ª£c ch·ªânh s·ª≠a");
    window.showResultModal("Vui l√≤ng ch·ªçn m·ªôt giao d·ªãch ƒë·ªÉ ch·ªânh s·ª≠a!", false);
    return;
  }
  
  // L·∫•y th√¥ng tin user
  const userInfo = window.getState ? window.getState().user : null;
  if (!userInfo) {
    console.error("‚ùå Kh√¥ng c√≥ th√¥ng tin user");
    window.showResultModal("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", false);
    return;
  }
  
  console.log("‚úÖ User info:", userInfo.tenNhanVien);
  
  // T√¨m giao d·ªãch ƒëang ch·ªânh s·ª≠a
  const transactionList = window.transactionList || [];
  const transaction = transactionList.find(t => t.transactionId === currentEditTransactionId);
  
  if (!transaction) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch:", currentEditTransactionId);
    window.showResultModal("Giao d·ªãch kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a. Vui l√≤ng th·ª≠ l·∫°i!", false);
    return;
  }
  
  console.log("‚úÖ Found transaction to update:", transaction.transactionId);
  
  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  const requiredFields = {
    customerEmail: "Email kh√°ch h√†ng",
    customerName: "T√™n kh√°ch h√†ng", 
    customerPhone: "Li√™n h·ªá",
    transactionDate: "Ng√†y giao d·ªãch",
    transactionType: "Lo·∫°i giao d·ªãch",
    duration: "S·ªë th√°ng ƒëƒÉng k√Ω",
    startDate: "Ng√†y b·∫Øt ƒë·∫ßu",
    softwareName: "T√™n ph·∫ßn m·ªÅm",
    softwarePackage: "G√≥i ph·∫ßn m·ªÅm",
    accountName: "T√™n t√†i kho·∫£n",
    revenue: "Doanh thu"
  };

  for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
    const element = document.getElementById(fieldId);
    if (!element) {
      console.error(`‚ùå Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${fieldId}`);
      continue;
    }
    
    const value = element.value;
    
    // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho c√°c tr∆∞·ªùng s·ªë
    if (fieldId === 'revenue' || fieldId === 'duration') {
      const numValue = parseFloat(value);
      if (isNaN(numValue) || numValue <= 0) {
        window.showResultModal(`${fieldName} kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i`, false);
        element.focus();
        return;
      }
    } else {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng text/select
      if (!value || value.trim() === "" || value === "0") {
        window.showResultModal(`${fieldName} kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng. Vui l√≤ng ki·ªÉm tra l·∫°i`, false);
        element.focus();
        return;
      }
    }
  }
  
  console.log("‚úÖ Validation passed");
  
  // Hi·ªÉn th·ªã processing modal
  if (typeof window.showProcessingModal === 'function') {
    window.showProcessingModal("ƒêang c·∫≠p nh·∫≠t giao d·ªãch...");
  } else {
    console.warn('‚ö†Ô∏è showProcessingModal not available, loading function...');
    // Dynamically load the function if not available
    import('./showProcessingModal.js').then(({ showProcessingModal }) => {
      window.showProcessingModal = showProcessingModal;
      showProcessingModal("ƒêang c·∫≠p nh·∫≠t giao d·ªãch...");
    }).catch(err => {
      console.error('‚ùå Failed to load showProcessingModal:', err);
    });
  }
  
  // Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i l√™n server
  const { BACKEND_URL } = getConstants();
  const data = {
    action: "updateTransaction",
    transactionId: currentEditTransactionId,
    transactionType: document.getElementById("transactionType").value,
    transactionDate: document.getElementById("transactionDate").value,
    customerName: document.getElementById("customerName").value,
    customerEmail: document.getElementById("customerEmail").value.toLowerCase(),
    customerPhone: document.getElementById("customerPhone").value,
    duration: parseInt(document.getElementById("duration").value) || 0,
    startDate: document.getElementById("startDate").value,
    endDate: document.getElementById("endDate").value,
    deviceCount: parseInt(document.getElementById("deviceCount").value) || 0,
    softwareName: document.getElementById("softwareName").value,
    softwarePackage: document.getElementById("softwarePackage").value,
    accountName: document.getElementById("accountName").value,
    revenue: parseFloat(document.getElementById("revenue").value) || 0,
    note: document.getElementById("note").value || "",
    tenNhanVien: transaction.tenNhanVien,
    maNhanVien: transaction.maNhanVien,
    editorTenNhanVien: userInfo.tenNhanVien,
    editorMaNhanVien: userInfo.maNhanVien,
    duocSuaGiaoDichCuaAi: userInfo.duocSuaGiaoDichCuaAi || "ch·ªâ b·∫£n th√¢n"
  };

  console.log("üì§ D·ªØ li·ªáu c·∫≠p nh·∫≠t g·ª≠i ƒëi:", JSON.stringify(data, null, 2));

  try {
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    });

    const result = await response.json();
    console.log("üì• K·∫øt qu·∫£ t·ª´ server:", result);

    if (result.status === "success") {
      // Reset currentEditTransactionId
      window.currentEditTransactionId = null;
      updateState({ currentEditTransactionId: null });
      
      // Reset form
      if (window.handleReset) {
        window.handleReset();
      }
      
      // Clear cache ƒë·ªÉ ƒë·∫£m b·∫£o load data m·ªõi
      cacheManager.clearTransactionCaches();
      
      // Reload transactions
      if (window.loadTransactions) {
        await window.loadTransactions();
      }
      
      console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng");
      
      // Close processing modal
      if (typeof window.closeProcessingModal === 'function') {
        window.closeProcessingModal();
      }
      
      if (typeof window.showResultModal === 'function') {
        window.showResultModal("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!", true);
      } else {
        alert("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!");
      }
    } else {
      console.error("‚ùå L·ªói t·ª´ server:", result.message);
      
      // Close processing modal
      if (typeof window.closeProcessingModal === 'function') {
        window.closeProcessingModal();
      }
      
      if (typeof window.showResultModal === 'function') {
        window.showResultModal(result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch!", false);
      } else {
        alert(result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch!");
      }
    }
  } catch (err) {
    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t:", err);
    
    // Close processing modal
    if (typeof window.closeProcessingModal === 'function') {
      window.closeProcessingModal();
    }
    
    if (typeof window.showResultModal === 'function') {
      window.showResultModal(`L·ªói k·∫øt n·ªëi server: ${err.message}`, false);
    } else {
      alert(`L·ªói k·∫øt n·ªëi server: ${err.message}`);
    }
  }
}