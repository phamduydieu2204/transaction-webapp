import { updatePagination } from './pagination.js';
import { updateTotalDisplay } from './updateTotalDisplay.js';

export function updateTable(transactionList, currentPage, itemsPerPage, formatDate, editTransaction, deleteTransaction, viewTransaction) {
  const tableBody = document.querySelector("#transactionTable tbody");
  tableBody.innerHTML = "";

  const totalPages = Math.ceil(transactionList.length / itemsPerPage);
  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedItems = transactionList.slice(startIndex, endIndex);

  let totalRevenue = 0;
  const today = new Date();
  const todayFormatted = `${today.getFullYear()}/${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}`;

  const isLink = (text) => /^https?:\/\//i.test(text);

  console.log("üìå B·∫ÆT ƒê·∫¶U HI·ªÇN TH·ªä GIAO D·ªäCH");
  console.log("üü¢ Vai tr√≤:", window.userInfo?.vaiTro);
  console.log("üü¢ isSearching:", window.isSearching);
  console.log("üü¢ todayFormatted:", todayFormatted);

  
      // ‚úÖ S·∫Øp x·∫øp giao d·ªãch m·ªõi nh·∫•t l√™n ƒë·∫ßu (timestamp gi·∫£m d·∫ßn)
      window.transactionList.sort((a, b) => {
        const timestampA = (a.transactionId || "").replace(/[^0-9]/g, "");
        const timestampB = (b.transactionId || "").replace(/[^0-9]/g, "");
        return timestampB.localeCompare(timestampA);
      });
  
  // ‚úÖ T√≠nh t·ªïng doanh thu
  if (window.isSearching === true) {
    totalRevenue = transactionList.reduce((sum, t) => {
      return sum + (parseFloat(t.revenue) || 0);
    }, 0);
    console.log("üîç ƒêang t√¨m ki·∫øm - T·ªïng doanh thu:", totalRevenue);
  } else {
    totalRevenue = transactionList.reduce((sum, t) => {
      if (t.transactionDate && t.transactionDate.startsWith(todayFormatted)) {
        return sum + (parseFloat(t.revenue) || 0);
      }
      return sum;
    }, 0);
    console.log("üìÖ Kh√¥ng t√¨m ki·∫øm - T·ªïng doanh thu h√¥m nay:", totalRevenue);
  }

  // ‚úÖ Hi·ªÉn th·ªã d·ªØ li·ªáu b·∫£ng
  paginatedItems.forEach((transaction, index) => {
    const globalIndex = startIndex + index;
    const row = document.createElement("tr");

    const parseDate = (str) => {
      const [y, m, d] = (str || "").split("/").map(Number);
      return new Date(y, m - 1, d);
    };
    const endDate = parseDate(transaction.endDate);
    if (endDate < today) {
      row.classList.add("expired-row");
    }

    const software = (transaction.softwareName || '').toLowerCase();
    const softwarePackage = (transaction.softwarePackage || '').trim().toLowerCase();
    const actions = [
      { value: "", label: "-- Ch·ªçn --" },
      { value: "view", label: "Xem" },
      { value: "edit", label: "S·ª≠a" },
      { value: "delete", label: "X√≥a" }
    ];
    const shouldShowCookie = (
      software === "helium10 diamon".toLowerCase() ||
      software === "helium10 platinum".toLowerCase() ||
      (software === "netflix" && softwarePackage === "share")
    );

    if (shouldShowCookie) {
      actions.push({ value: "updateCookie", label: "C·∫≠p nh·∫≠t Cookie" });
    } else {
      actions.push({ value: "changePassword", label: "ƒê·ªïi m·∫≠t kh·∫©u" });
    }

    const actionOptions = actions.map(opt => `<option value="${opt.value}">${opt.label}</option>`).join("\n");

    const linkHtml = isLink(transaction.customerPhone)
      ? `<a href="${transaction.customerPhone}" target="_blank" title="${transaction.customerPhone}">Li√™n h·ªá üîó</a>`
      : transaction.customerPhone || "";

    const infoCell = `
      <div>${linkHtml}</div>
      <div>
        Th√¥ng tin ƒë∆°n h√†ng
        <button class="copy-btn" data-content="${(transaction.orderInfo || "").replace(/"/g, '&quot;')}">üìã</button>
      </div>
    `;

    row.innerHTML = `
      <td>${transaction.transactionId}</td>
      <td>${formatDate(transaction.transactionDate)}</td>
      <td>${transaction.transactionType}</td>
      <td>${transaction.customerName}</td>
      <td>${transaction.customerEmail}</td>
      <td>${transaction.duration}</td>
      <td>${formatDate(transaction.startDate)}</td>
      <td>${formatDate(transaction.endDate)}</td>
      <td>${transaction.deviceCount}</td>
      <td>${transaction.softwareName} - ${transaction.softwarePackage} - ${transaction.accountName || ""}</td>
      <td>${transaction.revenue}</td>
      <td>${infoCell}</td>
      <td>
        <select class="action-select">
          ${actionOptions}
        </select>
      </td>
    `;

    const actionSelect = row.querySelector(".action-select");
    actionSelect.addEventListener("change", (e) => {
      const selected = e.target.value;
      if (selected === "edit") {
        window.editTransaction(globalIndex, transactionList, window.fetchSoftwareList, window.updatePackageList, window.updateAccountList);
      } else if (selected === "delete") {
        window.deleteTransaction(globalIndex);
      } else if (selected === "view") {
        window.viewTransaction(globalIndex, transactionList, window.formatDate, window.copyToClipboard);
      } else if (selected === "updateCookie") {
        if (typeof window.handleUpdateCookie === 'function') window.handleUpdateCookie(globalIndex);
        else alert("Ch·ª©c nƒÉng C·∫≠p nh·∫≠t Cookie ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai.");
      } else if (selected === "changePassword") {
        if (typeof window.handleChangePassword === 'function') window.handleChangePassword(globalIndex);
        else alert("Ch·ª©c nƒÉng ƒê·ªïi m·∫≠t kh·∫©u ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai.");
      }
      e.target.value = "";
    });

    const copyBtn = row.querySelector(".copy-btn");
    if (copyBtn) {
      copyBtn.addEventListener("click", () => {
        const content = copyBtn.getAttribute("data-content") || "";
        navigator.clipboard.writeText(content);
        alert("ƒê√£ sao ch√©p th√¥ng tin ƒë∆°n h√†ng.");
      });
    }

    tableBody.appendChild(row);
  });

  // ‚úÖ C·∫≠p nh·∫≠t ph√¢n trang
  const refreshTable = () =>
    updateTable(window.transactionList, window.currentPage, window.itemsPerPage, formatDate, editTransaction, deleteTransaction, viewTransaction);

  updatePagination(
    totalPages,
    window.currentPage,
    () => window.firstPage(refreshTable),
    () => window.prevPage(refreshTable),
    () => window.nextPage(refreshTable, window.itemsPerPage),
    () => window.lastPage(refreshTable, window.itemsPerPage),
    (page) => window.goToPage(page, refreshTable)
  );

  // ‚úÖ L∆∞u t·ªïng doanh thu v√†o bi·∫øn global v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã
  window.totalRevenue = totalRevenue;
  console.log("‚úÖ ƒê√£ l∆∞u totalRevenue:", totalRevenue);

  // G·ªçi h√†m c·∫≠p nh·∫≠t hi·ªÉn th·ªã t·ªïng s·ªë
  if (typeof updateTotalDisplay === 'function') {
    updateTotalDisplay();
  } else if (typeof window.updateTotalDisplay === 'function') {
    window.updateTotalDisplay();
  } else {
    // Fallback n·∫øu h√†m ch∆∞a load
    console.warn("‚ö†Ô∏è updateTotalDisplay ch∆∞a s·∫µn s√†ng, s·ª≠ d·ª•ng fallback");
    const todayRevenueElement = document.getElementById("todayRevenue");
    if (todayRevenueElement && window.userInfo && window.userInfo.vaiTro && window.userInfo.vaiTro.toLowerCase() === "admin") {
      const displayText = window.isSearching 
        ? `T·ªïng doanh thu (k·∫øt qu·∫£ t√¨m ki·∫øm): ${totalRevenue.toLocaleString()} VNƒê`
        : `T·ªïng doanh thu h√¥m nay: ${totalRevenue.toLocaleString()} VNƒê`;
      todayRevenueElement.textContent = displayText;
      console.log("üí∞ Fallback - Hi·ªÉn th·ªã doanh thu:", displayText);
    }
  }
}