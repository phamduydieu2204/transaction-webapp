/**
 * comparisonLogic.js
 * Cash vs accrual comparison v√† analysis
 */

import { formatCurrency } from '../statisticsCore.js';

/**
 * Compare Cash Flow and Accrual views
 */
export function compareViews(cashFlow, accrual) {
  const comparison = {
    totalDifference: cashFlow.total - accrual.total,
    percentDifference: cashFlow.total > 0 ? ((cashFlow.total - accrual.total) / cashFlow.total * 100) : 0,
    monthlyDifferences: {},
  };

  // Compare by month
  const allMonths = new Set([...Object.keys(cashFlow.byMonth), ...Object.keys(accrual.byMonth)]);
  allMonths.forEach(month => {
    const cfAmount = cashFlow.byMonth[month] || 0;
    const acAmount = accrual.byMonth[month] || 0;
    comparison.monthlyDifferences[month] = {
      cashFlow: cfAmount,
      accrual: acAmount,
    };
  });

  // Generate insights
  if (Math.abs(comparison.totalDifference) > 1000000) {
    comparison.insights.push({
      type: 'warning',
      message: `Ch√™nh l·ªách l·ªõn: ${formatCurrency(Math.abs(comparison.totalDifference), 'VND')} gi·ªØa 2 ph∆∞∆°ng ph√°p`
    });
  }

  if (cashFlow.largePayments.length > 0) {
    comparison.insights.push({
      type: 'info',
    });
  }

  return comparison;
}

/**
 * Render comparison summary
 */
export function renderComparisonSummary(comparison) {
  const differenceClass = comparison.totalDifference > 0 ? 'positive' : 'negative';
  
  return `
    <div class="comparison-summary">
      <div class="summary-card">
        <h3>üìä T·ªïng quan</h3>
        <div class="summary-item">
          <span>Ch√™nh l·ªách t·ªïng:</span>
          <span class="${differenceClass}">${formatCurrency(Math.abs(comparison.totalDifference), 'VND')}</span>
        </div>
        <div class="summary-item">
          <span>T·ª∑ l·ªá ch√™nh l·ªách:</span>
          <span>${comparison.percentDifference.toFixed(1)}%</span>
        </div>
      </div>
      
      ${comparison.insights.map(insight => `
        <div class="insight-card ${insight.type}">
          <i class="fas fa-${insight.type === 'warning' ? 'exclamation-triangle' : 'info-circle'}"></i>
          ${insight.message}
        </div>
      `).join('')}
    </div>
  `;
}

/**
 * Render dual view charts
 */
export function renderDualViewCharts(cashFlow, accrual) {
  return `
    <div class="dual-view-charts">
      <div class="chart-container">
        <h3>üíµ Cash Flow (D√≤ng ti·ªÅn th·ª±c)</h3>
        <canvas id="cashFlowChart"></canvas>
        <div class="chart-summary">
          <div class="total-amount">${formatCurrency(cashFlow.total, 'VND')}</div>
          <div class="chart-description">T·ªïng ti·ªÅn chi th·ª±c t·∫ø</div>
        </div>
      </div>
      
      <div class="chart-container">
        <h3>üìÖ Chi ph√≠ ph√¢n b·ªï (Accrual)</h3>
        <canvas id="accrualChart"></canvas>
        <div class="chart-summary">
          <div class="total-amount">${formatCurrency(accrual.total, 'VND')}</div>
          <div class="chart-description">T·ªïng chi ph√≠ ƒë√£ ph√¢n b·ªï</div>
        </div>
      </div>
    </div>
  `;
}

/**
 * Render detailed breakdown
 */
export function renderDetailedBreakdown(cashFlow, accrual) {
  // Prepare monthly comparison data
  const allMonths = new Set([...Object.keys(cashFlow.byMonth), ...Object.keys(accrual.byMonth)]);
  const sortedMonths = Array.from(allMonths).sort();

  return `
    <div class="detailed-breakdown">
      <h3>üìà Chi ti·∫øt theo th√°ng</h3>
      <table class="comparison-table">
        <thead>
          <tr>
            <th>Th√°ng</th>
            <th>Cash Flow</th>
            <th>Chi ph√≠ ph√¢n b·ªï</th>
            <th>Ch√™nh l·ªách</th>
            <th>Ghi ch√∫</th>
          </tr>
        </thead>
        <tbody>
          ${sortedMonths.map(month => {
            const cfAmount = cashFlow.byMonth[month] || 0;
            const acAmount = accrual.byMonth[month] || 0;
            const difference = cfAmount - acAmount;
            const note = Math.abs(difference) > 5000000 ? 
              '‚ö†Ô∏è Ch√™nh l·ªách l·ªõn' : 
              difference > 0 ? 'üìà CF > Ph√¢n b·ªï' : 
              difference < 0 ? 'üìâ CF < Ph√¢n b·ªï' : '‚úÖ C√¢n b·∫±ng';
            
            return `
              <tr>
                <td>${formatMonth(month)}</td>
                <td class="amount">${formatCurrency(cfAmount, 'VND')}</td>
                <td class="amount">${formatCurrency(acAmount, 'VND')}</td>
                <td class="amount ${difference > 0 ? 'positive' : difference < 0 ? 'negative' : ''}">
                  ${formatCurrency(Math.abs(difference), 'VND')}
                </td>
                <td>${note}</td>
              </tr>
            `;
          }).join('')}
        </tbody>
        <tfoot>
          <tr>
            <th>T·ªïng c·ªông</th>
            <th class="amount">${formatCurrency(cashFlow.total, 'VND')}</th>
            <th class="amount">${formatCurrency(accrual.total, 'VND')}</th>
            <th class="amount ${cashFlow.total - accrual.total > 0 ? 'positive' : 'negative'}">
              ${formatCurrency(Math.abs(cashFlow.total - accrual.total), 'VND')}
            </th>
            <th></th>
          </tr>
        </tfoot>
      </table>
    </div>
  `;
}

/**
 * Render insights section
 */
export function renderInsights(comparison) {
  return `
    <div class="insights-section">
      <h3>üí° Ph√¢n t√≠ch & Khuy·∫øn ngh·ªã</h3>
      <div class="insights-grid">
        <div class="insight-card">
          <h4>üìä S·ª≠ d·ª•ng b√°o c√°o n√†o?</h4>
          <ul>
            <li><strong>Cash Flow:</strong> ƒê·ªÉ qu·∫£n l√Ω d√≤ng ti·ªÅn, l·∫≠p k·∫ø ho·∫°ch chi ti√™u</li>
            <li><strong>Chi ph√≠ ph√¢n b·ªï:</strong> ƒê·ªÉ ƒë√°nh gi√° hi·ªáu qu·∫£ kinh doanh, t√≠nh l·ª£i nhu·∫≠n ch√≠nh x√°c</li>
          </ul>
        </div>
        
        <div class="insight-card">
          <h4>üéØ Khuy·∫øn ngh·ªã</h4>
          <ul>
            <li>Ph√¢n b·ªï c√°c chi ph√≠ ƒë·ªãnh k·ª≥ (thu√™ nh√†, l∆∞∆°ng, b·∫£o hi·ªÉm)</li>
            <li>Theo d√µi c·∫£ 2 g√≥c ƒë·ªô ƒë·ªÉ c√≥ c√°i nh√¨n to√†n di·ªán</li>
            <li>S·ª≠ d·ª•ng Cash Flow cho qu·∫£n l√Ω ng·∫Øn h·∫°n</li>
            <li>S·ª≠ d·ª•ng Accrual cho b√°o c√°o t√†i ch√≠nh</li>
          </ul>
        </div>
      </div>
    </div>
  `;
}

/**
 * Format month for display
 */
function formatMonth(monthStr) {
  const [year, month] = monthStr.split('-');
  const monthNames = ['', 'Th√°ng 1', 'Th√°ng 2', 'Th√°ng 3', 'Th√°ng 4', 'Th√°ng 5', 'Th√°ng 6',
                      'Th√°ng 7', 'Th√°ng 8', 'Th√°ng 9', 'Th√°ng 10', 'Th√°ng 11', 'Th√°ng 12'];
  return `${monthNames[parseInt(month)]} ${year}`;
}

/**
 * Analyze variance between cash flow and accrual
 */
export function analyzeVariance(comparison) {
  const analysis = {
    significantVariances: [],
    pattern: 'stable',
  };
  
  // Find months with significant variance
  Object.keys(comparison.monthlyDifferences).forEach(month => {
    const diff = comparison.monthlyDifferences[month];
    const variance = Math.abs(diff.difference);
    const percentVariance = diff.cashFlow > 0 ? (variance / diff.cashFlow * 100) : 0;
    
    if (percentVariance > 20) {
      analysis.significantVariances.push({
        month,
        variance,
        percentVariance,
      });
    }
  });
  
  // Determine pattern
  if (analysis.significantVariances.length > 3) {
    analysis.pattern = 'high_variance';
  } else if (analysis.significantVariances.length === 0) {
    analysis.pattern = 'well_aligned';
  }
  
  // Generate recommendations based on pattern
  if (analysis.pattern === 'high_variance') {
    analysis.recommendations.push({
      priority: 'high',
    });
  }
  
  return analysis;
}

/**
 * Calculate reconciliation between cash flow and accrual
 */
export function calculateReconciliation(cashFlow, accrual) {
  const reconciliation = {
    startingCashFlow: cashFlow.total,
    adjustments: [],
    endingAccrual: accrual.total,
  };
  
  // Calculate timing differences from allocated expenses
  const timingDifference = accrual.allocatedExpenses.reduce((sum, exp) => {
    return sum + (exp.amount - exp.allocatedAmount);
  }, 0);
  
  if (timingDifference !== 0) {
    reconciliation.adjustments.push({
      type: 'timing',
      description: 'Ch√™nh l·ªách th·ªùi gian ph√¢n b·ªï',
    });
  }
  
  // Calculate unexplained difference
  const explainedDifference = reconciliation.adjustments.reduce((sum, adj) => sum + adj.amount, 0);
  reconciliation.unexplainedDifference = (cashFlow.total - accrual.total) - explainedDifference;
  
  return reconciliation;
}