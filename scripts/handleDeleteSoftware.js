import { getConstants } from './constants.js';
import { cacheManager } from './core/cacheManager.js';

/**
 * X√≥a ph·∫ßn m·ªÅm v√† c·∫≠p nh·∫≠t giao d·ªãch li√™n quan
 * @param {Object} software - Object ph·∫ßn m·ªÅm c·∫ßn x√≥a
 * @param {Function} reloadCallback - Callback ƒë·ªÉ reload danh s√°ch sau khi x√≥a
 */
export async function handleDeleteSoftware(software, reloadCallback) {
  if (!software) {
    alert("‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ph·∫ßn m·ªÅm ƒë·ªÉ x√≥a.");
    return;
  }

  // Confirm deletion
  const confirmMessage = `‚ùó B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a ph·∫ßn m·ªÅm n√†y?\n\n` +
    `T√™n ph·∫ßn m·ªÅm: ${software.softwareName}\n` +
    `G√≥i ph·∫ßn m·ªÅm: ${software.softwarePackage}\n` +
    `T√™n t√†i kho·∫£n: ${software.accountName}\n\n` +
    `‚ö†Ô∏è L∆∞u √Ω: C√°c giao d·ªãch c√≥ ng√†y k·∫øt th√∫c trong t∆∞∆°ng lai s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t t√™n t√†i kho·∫£n th√†nh "Ch∆∞a c√≥ nh√≥m".`;

  if (!confirm(confirmMessage)) return;

  const { BACKEND_URL } = getConstants();
  
  try {
    // console.log('üóëÔ∏è B·∫Øt ƒë·∫ßu x√≥a ph·∫ßn m·ªÅm:', software);
    
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "handleDeleteSoftware",
        softwareName: software.softwareName,
        softwarePackage: software.softwarePackage,
        accountName: software.accountName,
        maNhanVien: window.userInfo?.maNhanVien || ""
      })
    });

    const result = await response.json();
    
    if (result.status === "success") {
      alert(`‚úÖ ${result.message}`);
      
      // Clear related caches
      if (cacheManager) {
        cacheManager.clearSoftwareCaches?.();
        cacheManager.clearTransactionCaches?.();
      }
      
      // Reload software data
      if (typeof reloadCallback === 'function') {
        await reloadCallback();
      } else if (typeof window.loadSoftwareData === 'function') {
        await window.loadSoftwareData();
      }
      
      // console.log('‚úÖ ƒê√£ x√≥a ph·∫ßn m·ªÅm th√†nh c√¥ng:', result.data);
      
    } else {
      alert("‚ùå Kh√¥ng th·ªÉ x√≥a ph·∫ßn m·ªÅm: " + result.message);
      console.error('‚ùå L·ªói khi x√≥a ph·∫ßn m·ªÅm:', result.message);
    }
    
  } catch (error) {
    alert("‚ùå L·ªói khi x√≥a ph·∫ßn m·ªÅm: " + error.message);
    console.error('‚ùå L·ªói khi x√≥a ph·∫ßn m·ªÅm:', error);
  }
}