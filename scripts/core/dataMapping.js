/**
 * Data Mapping Configuration
 * Maps Google Sheets column names to application field names
 */

/**
 * Transaction field mapping based on Google Sheets structure
 * Columns A-V: M√£ giao d·ªãch -> M√£ nh√¢n vi√™n
 */
export const TRANSACTION_FIELD_MAPPING = {
  // Column A: M√£ giao d·ªãch
  transactionId: ['M√£ giao d·ªãch', 'maGiaoDich', 'id', 'transactionId'],
  
  // Column B: Ng√†y giao d·ªãch
  transactionDate: ['Ng√†y giao d·ªãch', 'ngayGiaoDich', 'date', 'transactionDate'],
  
  // Column C: Lo·∫°i giao d·ªãch (ƒê√£ ho√†n t·∫•t, ƒê√£ thanh to√°n, Ch∆∞a thanh to√°n, Ho√†n ti·ªÅn)
  transactionType: ['Lo·∫°i giao d·ªãch', 'loaiGiaoDich', 'status', 'transactionType'],
  
  // Column D: T√™n kh√°ch h√†ng
  customerName: ['T√™n kh√°ch h√†ng', 'tenKhachHang', 'customer', 'customerName'],
  
  // Column E: Email
  email: ['Email', 'email'],
  
  // Column F: Li√™n h·ªá
  contact: ['Li√™n h·ªá', 'lienHe', 'contact', 'phone'],
  
  // Column G: S·ªë th√°ng ƒëƒÉng k√Ω
  subscriptionMonths: ['S·ªë th√°ng ƒëƒÉng k√Ω', 'soThangDangKy', 'months', 'subscriptionMonths'],
  
  // Column H: Ng√†y b·∫Øt ƒë·∫ßu
  startDate: ['Ng√†y b·∫Øt ƒë·∫ßu', 'ngayBatDau', 'startDate'],
  
  // Column I: Ng√†y k·∫øt th√∫c
  endDate: ['Ng√†y k·∫øt th√∫c', 'ngayKetThuc', 'endDate'],
  
  // Column J: S·ªë thi·∫øt b·ªã
  deviceCount: ['S·ªë thi·∫øt b·ªã', 'soThietBi', 'devices', 'deviceCount'],
  
  // Column K: T√™n ph·∫ßn m·ªÅm
  softwareName: ['T√™n ph·∫ßn m·ªÅm', 'tenPhanMem', 'software', 'product', 'softwareName'],
  
  // Column L: G√≥i ph·∫ßn m·ªÅm
  softwarePackage: ['G√≥i ph·∫ßn m·ªÅm', 'goiPhanMem', 'package', 'softwarePackage'],
  
  // Column M: T√™n t√†i kho·∫£n
  accountName: ['T√™n t√†i kho·∫£n', 'tenTaiKhoan', 'account', 'accountName'],
  
  // Column N: ID Sheet T√†i kho·∫£n
  sheetId: ['ID Sheet T√†i kho·∫£n', 'idSheetTaiKhoan', 'sheetId'],
  
  // Column O: C·∫≠p nh·∫≠t Cookie
  cookieUpdate: ['C·∫≠p nh·∫≠t Cookie', 'capNhatCookie', 'cookieUpdate'],
  
  // Column P: Th√¥ng tin ƒë∆°n h√†ng
  orderInfo: ['Th√¥ng tin ƒë∆°n h√†ng', 'thongTinDonHang', 'orderInfo'],
  
  // Column Q: Doanh thu
  revenue: ['Doanh thu', 'doanhThu', 'revenue', 'amount'],
  
  // Column R: Hoa h·ªìng
  commission: ['Hoa h·ªìng', 'hoaHong', 'commission'],
  
  // Column S: Ghi ch√∫
  notes: ['Ghi ch√∫', 'ghiChu', 'notes'],
  
  // Column T: T√™n chu·∫©n
  standardName: ['T√™n chu·∫©n', 'tenChuan', 'standardName'],
  
  // Column U: T√™n nh√¢n vi√™n
  employeeName: ['T√™n nh√¢n vi√™n', 'tenNhanVien', 'employee', 'employeeName'],
  
  // Column V: M√£ nh√¢n vi√™n
  employeeId: ['M√£ nh√¢n vi√™n', 'maNhanVien', 'employeeId']
};

/**
 * Get field value from transaction object with fallback support
 * @param {Object} transaction - Transaction object
 * @param {string} fieldName - Field name to retrieve
 * @returns {*} Field value or null
 */
export function getTransactionField(transaction, fieldName) {
  if (!transaction || !fieldName) return null;
  
  const possibleKeys = TRANSACTION_FIELD_MAPPING[fieldName];
  if (!possibleKeys) return null;
  
  // Try each possible key until we find a value
  for (const key of possibleKeys) {
    if (transaction.hasOwnProperty(key) && transaction[key] !== undefined && transaction[key] !== null) {
      return transaction[key];
    }
  }
  
  return null;
}

/**
 * Normalize transaction object to use consistent field names
 * @param {Object} rawTransaction - Raw transaction from API
 * @returns {Object} Normalized transaction object
 */
export function normalizeTransaction(rawTransaction) {
  if (!rawTransaction) return null;
  
  const normalized = {};
  
  // Map each field using the mapping configuration
  for (const [fieldName, possibleKeys] of Object.entries(TRANSACTION_FIELD_MAPPING)) {
    const value = getTransactionField(rawTransaction, fieldName);
    if (value !== null) {
      normalized[fieldName] = value;
    }
  }
  
  // Ensure numeric fields are properly parsed
  if (normalized.revenue) {
    normalized.revenue = parseFloat(normalized.revenue) || 0;
  }
  if (normalized.commission) {
    normalized.commission = parseFloat(normalized.commission) || 0;
  }
  if (normalized.deviceCount) {
    normalized.deviceCount = parseInt(normalized.deviceCount) || 0;
  }
  if (normalized.subscriptionMonths) {
    normalized.subscriptionMonths = parseInt(normalized.subscriptionMonths) || 0;
  }
  
  // Ensure date fields are valid
  if (normalized.transactionDate) {
    normalized.transactionDate = normalizeDate(normalized.transactionDate);
  }
  if (normalized.startDate) {
    normalized.startDate = normalizeDate(normalized.startDate);
  }
  if (normalized.endDate) {
    normalized.endDate = normalizeDate(normalized.endDate);
  }
  
  // Debug log for customer data
  if (normalized.customerName || normalized.email) {
    console.log('üîç Normalized transaction:', {
      customerName: normalized.customerName,
      email: normalized.email,
      revenue: normalized.revenue,
      originalData: rawTransaction
    });
  }
  
  return normalized;
}

/**
 * Normalize date string to consistent format
 * @param {string|Date} dateValue - Date value to normalize
 * @returns {string} Normalized date string or null
 */
function normalizeDate(dateValue) {
  if (!dateValue) return null;
  
  try {
    const date = new Date(dateValue);
    if (!isNaN(date.getTime())) {
      return date.toISOString();
    }
  } catch (e) {
    console.warn('Invalid date value:', dateValue);
  }
  
  return null;
}

/**
 * Get display name for transaction type
 * @param {string} type - Transaction type value
 * @returns {string} Display name
 */
export function getTransactionTypeDisplay(type) {
  if (!type) return 'Kh√¥ng x√°c ƒë·ªãnh';
  
  const typeLower = type.toLowerCase();
  
  if (typeLower.includes('ho√†n t·∫•t') || typeLower.includes('completed')) {
    return 'ƒê√£ ho√†n t·∫•t';
  }
  if (typeLower.includes('ƒë√£ thanh to√°n') || typeLower.includes('paid')) {
    return 'ƒê√£ thanh to√°n';
  }
  if (typeLower.includes('ch∆∞a thanh to√°n') || typeLower.includes('unpaid')) {
    return 'Ch∆∞a thanh to√°n';
  }
  if (typeLower.includes('ho√†n ti·ªÅn') || typeLower.includes('refund')) {
    return 'Ho√†n ti·ªÅn';
  }
  
  return type;
}

/**
 * Check if transaction has specific status
 * @param {Object} transaction - Transaction object
 * @param {string} status - Status to check
 * @returns {boolean} True if transaction has the status
 */
export function hasTransactionStatus(transaction, status) {
  const type = getTransactionField(transaction, 'transactionType');
  if (!type) return false;
  
  const typeLower = type.toLowerCase();
  const statusLower = status.toLowerCase();
  
  return typeLower.includes(statusLower);
}