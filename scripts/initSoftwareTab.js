/**
 * Initialize Software Tab
 * Handles software data loading, display, and pagination
 */
      if (window.softwareList.length > 0) {
        const hasOrderInfo = window.softwareList.some(item => item.orderInfo);
        const hasPasswordChangeDays = window.softwareList.some(item => item.passwordChangeDays);
      }
      
      // Update display
      updateSoftwareTable();
      updateSoftwareTotalDisplay();
      
      // Update form dropdowns
      updateSoftwareFormDropdowns();
    } else {
      console.error('‚ùå Error loading software data:', result.message);
      window.softwareList = [];
      updateSoftwareTable();
      updateSoftwareTotalDisplay();
    }
  } catch (error) {
    console.error('‚ùå Error loading software data:', error);
    // Build action dropdown based on fileType
    } else if (rowBackgroundColor) {
      rowStyle = `style="${rowBackgroundColor}"`;
    }
    
    return `
      <tr ${rowStyle}>
        <td style="text-align: center;">${actualIndex}</td>
        <td>${softwareName}</td>
        <td>${softwarePackage}</td>
        <td>${accountName}</td>
        <td style="text-align: right;">${price}</td>
        <td class="login-info-cell">${loginInfo}</td>
        <td style="text-align: center;">${lastModified}</td>
        <td style="text-align: center;">${renewalDate}</td>
        <td style="text-align: center;">
          ${actionDropdown}
        </td>
      </tr>
    `;
  }).join('');
  
  updateSoftwarePagination();
}

function formatLoginInfo(software) {
  const items = [];
  
  if (software.username) {
    items.push(`
      <div class="login-item">
        <span class="login-label">Email:</span>
        <span class="login-value">${escapeHtml(software.username)}</span>
        <button class="copy-small-btn" onclick="copyToClipboard('${escapeHtml(software.username)}')" title="Sao ch√©p email">üìã</button>
      </div>
    `);
  }
  
  if (software.password) {
    items.push(`
      <div class="login-item">
        <span class="login-label">M·∫≠t kh·∫©u:</span>
        <span class="login-value password-mask">${maskPassword(software.password)}</span>
        <button class="copy-small-btn" onclick="copyToClipboard('${escapeHtml(software.password)}')" title="Sao ch√©p m·∫≠t kh·∫©u">üìã</button>
      </div>
    `);
  }
  
  if (software.secret) {
    items.push(`
      <div class="login-item">
        <span class="login-label">Secret:</span>
        <span class="login-value secret-mask">${maskSecret(software.secret)}</span>
        <button class="copy-small-btn" onclick="copyToClipboard('${escapeHtml(software.secret)}')" title="Sao ch√©p secret">üìã</button>
      </div>
    `);
  }
}
}
}
  });

    });
  } catch (error) {
  });

    }).format(number);
  } catch (error) {
    return amount.toString();
  }
}

function escapeHtml(text) {
  if (!text) return '';
  const div = document.createElement('div');
  div.textContent = text;
  return div.innerHTML;
}

function updateSoftwareTotalDisplay() {
  const totalDisplay = document.getElementById('softwareTotalDisplay');
  if (totalDisplay) {
    if (window.isSoftwareSearching) {
      totalDisplay.innerHTML = `
        <span style="color: #007bff;">üîç K·∫øt qu·∫£ t√¨m ki·∫øm: ${window.softwareList.length} ph·∫ßn m·ªÅm</span>
        <button onclick="clearSoftwareSearch()" style="margin-left: 10px; padding: 4px 8px; font-size: 12px; background: #6c757d; color: white; border: none; border-radius: 4px; cursor: pointer;">
          X√≥a b·ªô l·ªçc
        </button>
      `;
    } else {
      totalDisplay.textContent = `T·ªïng: ${window.softwareList.length} ph·∫ßn m·ªÅm`;
    }
  }
}
      console.log('View software:', software);
      break;
    case 'edit':
      console.log('Edit software:', software);
        window.open(`https://docs.google.com/spreadsheets/d/${software.accountSheetId}/edit`, '_blank');
      }
  };
  
  // Batch DOM updates to prevent layout thrashing
  });

      });
    }
    
    // Show success message
      headers: { "Content-Type": "application/json" },
  });
        ...formData
      })
    });
    
    const result = await response.json();
    
    // Close processing modal
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    if (result.status === "success") {
      // Show success message
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('Th√†nh c√¥ng!', result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng', 'success');
      } else {
        alert('‚úÖ ' + (result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng'));
      }
      
      // Reset form
      window.handleSoftwareReset();
      
      // Reload software data to reflect changes
      await loadSoftwareData();

    } else {
      // Show error message
      const errorMessage = result.message || 'C√≥ l·ªói x·∫£y ra khi th√™m ph·∫ßn m·ªÅm';
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('L·ªói!', errorMessage, 'error');
      } else {
        alert('‚ùå ' + errorMessage);
      }
      console.error('‚ùå Error adding software:', result.message);
    }
  } catch (error) {
    // Close processing modal if still open
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('L·ªói k·∫øt n·ªëi!', errorMessage, 'error');
    } else {
      alert('‚ùå ' + errorMessage);
    }
    console.error('‚ùå Network error adding software:', error);
  }
};
      // New values for update
      ...formData
    };
    
    console.log('Software update data:', updateData);
    
    // Call backend API
      headers: { "Content-Type": "application/json" },
  });
        ...updateData
      })
    });
    
    const result = await response.json();
    
    // Close processing modal
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    if (result.status === "success") {
      // Show success message
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('Th√†nh c√¥ng!', result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng', 'success');
      } else {
        alert('‚úÖ ' + (result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng'));
      }
      
      // Reset form and editing state
      window.handleSoftwareReset();
      
      // Reload software data to reflect changes
      await loadSoftwareData();

    } else {
      // Show error message
      const errorMessage = result.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm';
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('L·ªói!', errorMessage, 'error');
      } else {
        alert('‚ùå ' + errorMessage);
      }
      console.error('‚ùå Error updating software:', result.message);
    }
  } catch (error) {
    // Close processing modal if still open
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('L·ªói k·∫øt n·ªëi!', errorMessage, 'error');
    } else {
      alert('‚ùå ' + errorMessage);
    }
    console.error('‚ùå Network error updating software:', error);
  }
};

window.handleSoftwareSearch = async function() {
  
  // Get form data
  const formData = getSoftwareFormData();
  
  // Check if at least one search field is filled
  const hasSearchCriteria = Object.values(formData).some(value => value && value.trim() !== '');
  
  if (!hasSearchCriteria) {
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('Th√¥ng b√°o!', 'Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ti√™u ch√≠ t√¨m ki·∫øm', 'warning');
    } else {
      alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ti√™u ch√≠ t√¨m ki·∫øm');
    }
    return;
  }
  
  try {
    // Show processing modal
    if (typeof showProcessingModalModern === 'function') {
      showProcessingModalModern('ƒêang t√¨m ki·∫øm ph·∫ßn m·ªÅm...', 'Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t');
    }
    
    // Prepare search conditions (only include non-empty fields)
    const searchConditions = {};
    Object.entries(formData).forEach(([key, value]) => {
      if (value && value.trim() !== '') {
        searchConditions[key] = value.trim();
      }
    });
    
    console.log('Software search conditions:', searchConditions);
    
    // Call backend API
    const { BACKEND_URL } = getConstants();
    const response = await fetch(BACKEND_URL, {
  });
    });
    
    const result = await response.json();
    
    // Close processing modal
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    if (result.status === "success") {
      // Store search results and enable search mode
      window.softwareList = result.data || [];
      window.isSoftwareSearching = true;
      window.softwareSearchTerms = Object.values(searchConditions);
      
      // Reset to first page
      window.currentSoftwarePage = 1;
      
      // Update display
      updateSoftwareTable();
      updateSoftwareTotalDisplay();
      
      // Show success message
      const message = result.message || `T√¨m th·∫•y ${result.data.length} ph·∫ßn m·ªÅm ph√π h·ª£p`;
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('K·∫øt qu·∫£ t√¨m ki·∫øm!', message, 'success');
      } else {
        alert('‚úÖ ' + message);
      }

    } else {
      // Show error message
      const errorMessage = result.message || 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ph·∫ßn m·ªÅm';
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('L·ªói!', errorMessage, 'error');
      } else {
        alert('‚ùå ' + errorMessage);
      }
      console.error('‚ùå Error searching software:', result.message);
    }
  } catch (error) {
    // Close processing modal if still open
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('L·ªói k·∫øt n·ªëi!', errorMessage, 'error');
    } else {
      alert('‚ùå ' + errorMessage);
    }
    console.error('‚ùå Network error searching software:', error);
  }
};
  };
}

function validateSoftwareForm(formData) {
  let isValid = true;
  const errors = [];
  
  // Clear previous errors
  clearSoftwareFormErrors();
  
  // Validate required fields
  const requiredFields = [
    { field: 'softwareName', name: 'T√™n ph·∫ßn m·ªÅm', elementId: 'softwareFormName' },
    { field: 'softwarePackage', name: 'G√≥i ph·∫ßn m·ªÅm', elementId: 'softwareFormPackage' },
    { field: 'accountName', name: 'T√™n t√†i kho·∫£n', elementId: 'softwareFormAccount' },
    { field: 'loginUsername', name: 'T√™n ƒëƒÉng nh·∫≠p', elementId: 'loginUsername' },
    { field: 'loginPassword', name: 'M·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p', elementId: 'loginPassword' }
  ];
  
  requiredFields.forEach(({ field, name, elementId }) => {
    if (!formData[field] || formData[field].trim() === '') {
      const errorMsg = `${name} l√† b·∫Øt bu·ªôc`;
      showSoftwareFieldError(elementId || field, errorMsg);
      errors.push(errorMsg);
      isValid = false;
    }
  });
  
  // Validate data lengths
  if (formData.softwareName && formData.softwareName.length > 100) {
    showSoftwareFieldError('softwareFormName', 'T√™n ph·∫ßn m·ªÅm kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° 100 k√Ω t·ª±');
    errors.push('T√™n ph·∫ßn m·ªÅm qu√° d√†i');
    isValid = false;
  }
  
  if (formData.loginPassword && formData.loginPassword.length < 4) {
    showSoftwareFieldError('loginPassword', 'M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 4 k√Ω t·ª±');
    errors.push('M·∫≠t kh·∫©u qu√° ng·∫Øn');
    isValid = false;
  }
  
  // Show summary error if validation fails
  if (!isValid) {
    console.warn('üî∫ Form validation errors:', errors);
    if (typeof showResultModalModern === 'function') {
      showResultModalModern(
        'L·ªói nh·∫≠p li·ªáu!', 
        'Vui l√≤ng ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc:\n‚Ä¢ ' + errors.join('\n‚Ä¢ '), 
        'error'
      );
    }
  }
  console.log('Total items:', window.softwareList.length);
  console.log('Sample data:', window.softwareList.slice(0, 3));
  
  // Unique software names
  const uniqueNames = [...new Set(window.softwareList.map(item => item.softwareName))].filter(Boolean);
  console.log('Unique software names:', uniqueNames);
  
  // Unique order info
  const uniqueOrderInfo = [...new Set(window.softwareList.map(item => item.orderInfo))].filter(Boolean);
  console.log('Unique order info:', uniqueOrderInfo);
  
  // Test filtering for first software
  if (uniqueNames.length > 0) {
    const testSoftware = uniqueNames[0];
    const packagesForSoftware = window.softwareList
      .filter(item => item.softwareName === testSoftware)
      .map(item => item.softwarePackage)
      .filter(Boolean);
    console.log(`Packages for "${testSoftware}":`, [...new Set(packagesForSoftware)]);
    
    const orderInfoForSoftware = window.softwareList
      .filter(item => item.softwareName === testSoftware)
      .map(item => item.orderInfo)
      .filter(Boolean);
    console.log(`Order info for "${testSoftware}":`, [...new Set(orderInfoForSoftware)]);
  }
};

// Debounce function to prevent excessive updates
function debounce(func, wait) {
  let timeout;
  return function executedFunction(...args) {
    const later = () => {
      clearTimeout(timeout);
      func(...args);
    };
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
  };
}

// Smart debounced dropdown update that only updates what's needed
const debouncedDropdownUpdate = debounce(() => {
  // Use requestAnimationFrame to batch DOM updates
  requestAnimationFrame(() => {
    try {
      updateSoftwarePackageDropdown();
      updateAccountNameDropdown();
      updateOrderInfoDropdown();
      updateStandardNameDropdown();
  } catch (error) {
      console.error('Error in debounced dropdown update:', error);
    }
  });
}, 100); // Reduced from 150ms to 100ms

// Function ƒë·ªÉ force refresh t·∫•t c·∫£ dropdowns - cho debugging
    };
    
    // Batch all value assignments
      // New data to update
      ...formData
    };
    
    // Call backend API
      headers: { "Content-Type": "application/json" },
  });
        ...updateData
      })
    });
    
    const result = await response.json();
    
    // Close processing modal
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    if (result.status === "success") {
      // Show success message
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('Th√†nh c√¥ng!', result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng', 'success');
      } else {
        alert('‚úÖ ' + (result.message || 'Ph·∫ßn m·ªÅm ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng'));
      }
      
      // Reset form and edit state
      window.handleSoftwareReset();
      window.currentEditSoftwareIndex = -1;
      
      // Reload software data to reflect changes
      await loadSoftwareData();

    } else {
      // Show error message
      console.error('‚ùå Error updating software:', result.message);
      
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('L·ªói!', result.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm', 'error');
      } else {
        alert('‚ùå ' + (result.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm'));
      }
    }
  } catch (error) {
    console.error('‚ùå Error in handleSoftwareUpdate:', error);
    
    // Close processing modal if it's open
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    const errorMessage = 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t ph·∫ßn m·ªÅm. Vui l√≤ng th·ª≠ l·∫°i.';
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('L·ªói!', errorMessage, 'error');
    } else {
      alert('‚ùå ' + errorMessage);
    }
  }
};

// ========================================
// SEARCH SOFTWARE FUNCTIONALITY
// ========================================

window.handleSoftwareSearch = async function() {
  
  try {
    // Get search conditions from form
    const conditions = getSoftwareSearchConditions();
    
    // Check if at least one search condition is provided
    if (Object.keys(conditions).length === 0) {
      if (typeof showResultModalModern === 'function') {
        showResultModalModern(
          'Thi·∫øu ƒëi·ªÅu ki·ªán t√¨m ki·∫øm!', 
          'Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒëi·ªÅu ki·ªán t√¨m ki·∫øm trong form.', 
          'warning'
        );
      } else {
        alert('‚ö†Ô∏è Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt ƒëi·ªÅu ki·ªán t√¨m ki·∫øm');
      }
      return;
    }
    
    // Show processing modal
    if (typeof showProcessingModalModern === 'function') {
      showProcessingModalModern('ƒêang t√¨m ki·∫øm ph·∫ßn m·ªÅm...', 'Vui l√≤ng ƒë·ª£i trong gi√¢y l√°t');
    }
    
    // Call backend API
    const { BACKEND_URL } = getConstants();
    const response = await fetch(BACKEND_URL, {
  });
    });
    
    const result = await response.json();
    
    // Close processing modal
    if (typeof closeProcessingModalModern === 'function') {
      closeProcessingModalModern();
    }
    
    if (result.status === "success") {
      // Set search mode and update software list
      window.isSoftwareSearching = true;
      window.softwareList = result.data || [];
      window.currentSoftwarePage = 1;
      
      // Update display
      updateSoftwareTable();
      updateSoftwareTotalDisplay();
      
      // Show success message
      const message = result.message || `T√¨m th·∫•y ${result.data.length} ph·∫ßn m·ªÅm ph√π h·ª£p`;
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('T√¨m ki·∫øm th√†nh c√¥ng!', message, 'success');
      } else {
        alert('‚úÖ ' + message);
      }

    } else {
      // Show error message
      console.error('‚ùå Error searching software:', result.message);
      
      if (typeof showResultModalModern === 'function') {
        showResultModalModern('L·ªói!', result.message || 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ph·∫ßn m·ªÅm', 'error');
      } else {
        alert('‚ùå ' + (result.message || 'C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm ph·∫ßn m·ªÅm'));
      }
    }
  } catch (error) {
    console.error('‚ùå Error in handleSoftwareSearch:', error);
    
    // Close processing modal if it's open
    }
  });
  // Yellow: when diffDays > passwordChangeDays
  } else if (diffDays > passwordChangeThreshold) {
  }
          };
          
          // Temporarily set this as current transaction for the handler
          };
          
          // Temporarily set this as current transaction for the handler
          const originalList = window.transactionList;
          window.transactionList = [tempTransaction];
          
          window.handleUpdateCookie(0);
          
          // Restore original list after a short delay
          setTimeout(() => {
            window.transactionList = originalList;
          }, 100);
        }
      } else {
        console.error('‚ùå handleUpdateCookie function not found');
        alert('‚ùå Ch·ª©c nƒÉng c·∫≠p nh·∫≠t cookie ch∆∞a s·∫µn s√†ng');
      }
      break;
    default:
      console.warn(`‚ö†Ô∏è Unknown action: ${action}`);
  }
};

// View software item details
function viewSoftwareItem(index) {
  const software = window.softwareList[index];
  if (!software) {
    console.error('‚ùå Software not found at index:', index);
        <h4>üíª ${software.softwareName} - ${software.softwarePackage}</h4>
        <p><strong>T√†i kho·∫£n:</strong> ${software.accountName}</p>
        <p><strong>Gi√° b√°n:</strong> ${formatCurrency(software.price)}</p>
        <p><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> ${software.username || 'Ch∆∞a c√≥'}</p>
        <p><strong>M·∫≠t kh·∫©u:</strong> ${software.password ? '***' : 'Ch∆∞a c√≥'}</p>
        <p><strong>Secret:</strong> ${software.secret ? '***' : 'Ch∆∞a c√≥'}</p>
        <p><strong>Ng√†y thay ƒë·ªïi:</strong> ${software.lastModified || 'Ch∆∞a c√≥'}</p>
        <p><strong>Ng√†y gia h·∫°n:</strong> ${software.renewalDate || 'Ch∆∞a c√≥'}</p>
        <p><strong>Lo·∫°i t·ªáp:</strong> ${software.fileType || 'Ch∆∞a c√≥'}</p>
        <p><strong>S·ªë ng√†y ƒë·ªïi MK:</strong> ${software.passwordChangeDays || 'M·∫∑c ƒë·ªãnh'}</p>
        ${software.orderInfo ? `<p><strong>Th√¥ng tin ƒë∆°n h√†ng:</strong><br>${software.orderInfo}</p>` : ''}
      </div>
    `;
    showResultModalModern('Chi ti·∫øt ph·∫ßn m·ªÅm', details, 'info');
  } else {
    // Fallback to alert if modal not available
    alert(`üíª ${software.softwareName}\n‚Ä¢ G√≥i: ${software.softwarePackage}\n‚Ä¢ T√†i kho·∫£n: ${software.accountName}\n‚Ä¢ Gi√°: ${formatCurrency(software.price)}`);
  }
}

// Open Google Sheet for software
function openSoftwareSheet(index) {
  const software = window.softwareList[index];
  if (!software) {
    console.error('‚ùå Software not found at index:', index);
    return;
  }
  
  if (!software.accountSheetId) {
    if (typeof showResultModalModern === 'function') {
      showResultModalModern('Th√¥ng b√°o', 'Ph·∫ßn m·ªÅm n√†y ch∆∞a c√≥ li√™n k·∫øt t·ªõi Google Sheet', 'warning');
    } else {
      alert('‚ö†Ô∏è Ph·∫ßn m·ªÅm n√†y ch∆∞a c√≥ li√™n k·∫øt t·ªõi Google Sheet');
    }
    return;
  }

  // Construct Google Sheets URL
  const sheetUrl = `https://docs.google.com/spreadsheets/d/${software.accountSheetId}/edit`;
  
  // Open in new tab
  window.open(sheetUrl, '_blank');
  
  // Show confirmation
  if (typeof showResultModalModern === 'function') {
    showResultModalModern('Th√†nh c√¥ng', `ƒê√£ m·ªü Google Sheet cho ${software.softwareName}`, 'success');
  }
}