/**
 * kpiCards.js
 * 
 * KPI (Key Performance Indicator) cards for financial dashboard
 * Handles metric cards, alerts, and performance indicators
 */
  return `
    <div class="kpi-card profit-card ${profitClass}">
      <div class="card-header">
        <div class="card-icon">${profitIcon}</div>
        <div class="card-title">${isProfit ? 'L·ª£i nhu·∫≠n' : 'L·ªó'}</div>
      </div>
      <div class="card-value">${formatCurrencyForChart(Math.abs(netProfit))} VND</div>
      <div class="card-detail">
        <span class="margin-text">T·ª∑ su·∫•t: ${profitMargin.toFixed(1)}%</span>
      </div>
    </div>
  `;
}

/**
 * Render transaction card
 * @param {number} transactionCount - Number of transactions
 * @param {number} totalRevenue - Total revenue for average calculation
 * @returns {string} HTML for transaction card
 */
  return `
    <div class="kpi-card transaction-card">
      <div class="card-header">
        <div class="card-icon">üîÑ</div>
        <div class="card-title">Giao d·ªãch</div>
      </div>
      <div class="card-value">${transactionCount.toLocaleString()}</div>
      <div class="card-detail">
        <span class="avg-text">TB: ${formatCurrencyForChart(avgTransactionValue)} VND</span>
      </div>
    </div>
  `;
}

/**
 * Render cash flow tracker cards
 * @param {Object} metrics - Financial metrics data
 * @param {string} containerId - Container element ID
 */
  return `
    <div class="kpi-card small net-cash-flow-card ${cardClass}">
      <div class="card-header">
        <div class="card-icon">${icon}</div>
        <div class="card-title">D√≤ng ti·ªÅn r√≤ng</div>
      </div>
      <div class="card-value small">${formatCurrencyForChart(Math.abs(netCashFlow))}</div>
      <div class="card-detail">${isPositive ? 'D∆∞∆°ng' : '√Çm'}</div>
    </div>
  `;
}

/**
 * Render weekly cash flow card
 */
  });
      description: `T·ª∑ su·∫•t l·ª£i nhu·∫≠n hi·ªán t·∫°i ch·ªâ ${profitMargin.toFixed(1)}%. C·∫ßn t·ªëi ∆∞u chi ph√≠ ho·∫∑c tƒÉng doanh thu.`
    });
  }

  // Negative profit alert
  });
      description: `Doanh nghi·ªáp ƒëang thua l·ªó v·ªõi t·ª∑ su·∫•t ${profitMargin.toFixed(1)}%. C·∫ßn h√†nh ƒë·ªông kh·∫©n c·∫•p.`
    });
  }

  // Cash flow alerts
  });
      description: `Runway ch·ªâ c√≤n ${Math.round(cashFlowMetrics.runwayDays)} ng√†y. C·∫ßn b·ªï sung thanh kho·∫£n ngay.`
    });
  } else if (cashFlowMetrics.runwayDays && cashFlowMetrics.runwayDays < 90) {
  });
      description: `Runway c√≤n ${Math.round(cashFlowMetrics.runwayDays)} ng√†y. N√™n chu·∫©n b·ªã k·∫ø ho·∫°ch t√†i ch√≠nh.`
    });
  }

  // Negative growth alert
  });
      description: `Doanh thu gi·∫£m ${Math.abs(growthMetrics.revenueGrowth).toFixed(1)}% so v·ªõi th√°ng tr∆∞·ªõc.`
    });
  }

  // High expense growth alert
  });
      description: `Chi ph√≠ tƒÉng ${growthMetrics.expenseGrowth.toFixed(1)}% so v·ªõi th√°ng tr∆∞·ªõc. C·∫ßn ki·ªÉm so√°t chi ph√≠.`
    });
  }

  // High burn rate alert
  });
      description: `T·ªëc ƒë·ªô chi ti√™u ${formatCurrencyForChart(cashFlowMetrics.burnRate)}/ng√†y. C·∫ßn t·ªëi ∆∞u chi ph√≠.`
    });
  }

  return alerts;
}