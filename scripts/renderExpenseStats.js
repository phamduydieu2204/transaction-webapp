// REFACTORED: renderExpenseStats.js now uses modular statistics system

import { getConstants } from './constants.js';
import { updateTotalDisplay } from './updateTotalDisplay.js';
import { fetchExpenseData, getCombinedStatistics } from './statisticsDataManager.js';
import { 
  normalizeDate, 
  calculateTotalExpenses, 
  groupExpensesByMonth,
  calculateFinancialAnalysis 
} from './statisticsCore.js';
import { renderMonthlySummaryTable } from './statisticsRenderer.js';

export async function renderExpenseStats() {
  // ‚úÖ KI·ªÇM TRA XEM C√ì ƒêANG ·ªû TAB CHI PH√ç KH√îNG
  const currentTab = document.querySelector(".tab-button.active");
  const isChiPhiTab = currentTab && currentTab.dataset.tab === "tab-chi-phi";
  const isThongKeTab = currentTab && currentTab.dataset.tab === "tab-thong-ke";
  
  if (!isChiPhiTab && !isThongKeTab) {
    console.log("‚è≠Ô∏è Kh√¥ng ·ªü tab chi ph√≠/th·ªëng k√™, b·ªè qua render");
    return;
  }
  
  // ‚úÖ SKIP TH·ªêNG K√ä N·∫æU UI CONTROLLER ƒê√É X·ª¨ L√ù
  if (isThongKeTab && window.statisticsUIControllerActive) {
    console.log("‚è≠Ô∏è Statistics UI Controller ƒëang x·ª≠ l√Ω, b·ªè qua renderExpenseStats");
    return;
  }
  
  // N·∫øu ƒëang trong tr·∫°ng th√°i t√¨m ki·∫øm, s·ª≠ d·ª•ng d·ªØ li·ªáu ƒë√£ t√¨m
  if (window.isExpenseSearching && window.expenseList) {
    renderExpenseData(window.expenseList);
    return;
  }
  
  console.log("üîÑ B·∫Øt ƒë·∫ßu load expense data b·∫±ng module m·ªõi...");
  
  try {
    // ‚úÖ S·ª¨ D·ª§NG MODULE M·ªöI ƒê·ªÇ FETCH DATA
    const expenseData = await fetchExpenseData({ forceRefresh: false });
    
    window.expenseList = expenseData || [];
    window.isExpenseSearching = false;
    renderExpenseData(expenseData);
    console.log("‚úÖ Load expense data th√†nh c√¥ng:", expenseData.length, "chi ph√≠");
    
  } catch (err) {
    console.error("‚ùå L·ªói khi th·ªëng k√™ chi ph√≠:", err);
    // Fallback to old method if new module fails
    console.log("üîÑ Th·ª≠ ph∆∞∆°ng ph√°p c≈©...");
    await renderExpenseStatsLegacy();
  }
}

// ‚úÖ LEGACY METHOD FOR BACKWARD COMPATIBILITY
async function renderExpenseStatsLegacy() {
  const { BACKEND_URL } = getConstants();
  
  try {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 15000);
    
    const res = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ action: "getExpenseStats" }),
      signal: controller.signal
    });

    clearTimeout(timeoutId);

    if (!res.ok) {
      throw new Error(`HTTP ${res.status}: ${res.statusText}`);
    }

    const result = await res.json();

    if (result.status === "success") {
      window.expenseList = result.data || [];
      window.isExpenseSearching = false;
      renderExpenseData(result.data);
      console.log("‚úÖ Legacy load expense data th√†nh c√¥ng:", result.data.length, "chi ph√≠");
    } else {
      console.error("‚ùå L·ªói t·ª´ server:", result.message);
    }
  } catch (err) {
    if (err.name === 'AbortError') {
      console.warn("‚ö†Ô∏è Load expense data b·ªã timeout sau 15 gi√¢y");
    } else {
      console.error("‚ùå L·ªói khi th·ªëng k√™ chi ph√≠ (legacy):", err);
    }
  }
}

function renderExpenseData(data) {
  console.log("üîç DEBUG: D·ªØ li·ªáu chi ph√≠ nh·∫≠n ƒë∆∞·ª£c:", data);
  
  // ‚úÖ KI·ªÇM TRA L·∫†I TAB HI·ªÜN T·∫†I TR∆Ø·ªöC KHI RENDER
  const currentTab = document.querySelector(".tab-button.active");
  const isChiPhiTab = currentTab && currentTab.dataset.tab === "tab-chi-phi";
  const isThongKeTab = currentTab && currentTab.dataset.tab === "tab-thong-ke";
  
  // ‚úÖ S·ª¨ D·ª§NG MODULE M·ªöI ƒê·ªÇ T√çNH T·ªîNG CHI PH√ç
  const today = new Date();
  const todayFormatted = normalizeDate(today);

  console.log("üìå B·∫ÆT ƒê·∫¶U T√çNH T·ªîNG CHI PH√ç V·ªöI MODULE M·ªöI");
  console.log("üü¢ Vai tr√≤:", window.userInfo?.vaiTro);
  console.log("üü¢ isExpenseSearching:", window.isExpenseSearching);
  console.log("üü¢ todayFormatted:", todayFormatted);
  console.log("üü¢ S·ªë l∆∞·ª£ng b·∫£n ghi chi ph√≠:", data?.length);

  // ‚úÖ S·ª¨ D·ª§NG FUNCTION M·ªöI ƒê·ªÇ T√çNH T·ªîNG
  const totalExpenses = calculateTotalExpenses(data, {
    isSearching: window.isExpenseSearching === true,
    targetDate: window.isExpenseSearching ? null : todayFormatted,
    currency: "VND"
  });

  const totalExpense = totalExpenses.VND || 0;
  console.log("‚úÖ T·ªïng chi ph√≠ t√≠nh ƒë∆∞·ª£c:", totalExpense);

  // ‚úÖ L∆∞u t·ªïng chi ph√≠ v√†o bi·∫øn global v√† c·∫≠p nh·∫≠t hi·ªÉn th·ªã
  window.totalExpense = totalExpense;

  // Kh√¥ng c·∫ßn c·∫≠p nh·∫≠t hi·ªÉn th·ªã totals n·ªØa - ƒë√£ x√≥a
  console.log("‚úÖ ƒê√£ l∆∞u totalExpense:", totalExpense, "- Kh√¥ng hi·ªÉn th·ªã totals");

  // ‚úÖ CH·ªà RENDER B·∫¢NG N·∫æU ƒêANG ·ªû TAB T∆Ø∆†NG ·ª®NG
  if (isChiPhiTab) {
    renderExpenseTable(data, normalizeDate);
  }

  if (isThongKeTab) {
    renderExpenseSummaryModular(data);
  }
}

// ‚úÖ S·ª¨ D·ª§NG MODULE M·ªöI ƒê·ªÇ RENDER B·∫¢NG TH·ªêNG K√ä
function renderExpenseSummaryModular(data) {
  try {
    // Check if statistics tab is active before processing
    const currentTab = document.querySelector(".tab-button.active");
    const isThongKeTab = currentTab && currentTab.dataset.tab === "tab-thong-ke";
    
    if (!isThongKeTab) {
      console.log("‚è≠Ô∏è Not on statistics tab, skipping modular summary");
      return;
    }

    const summaryData = groupExpensesByMonth(data, {
      currency: "VND",
      sortBy: "month",
      sortOrder: "desc"
    });

    renderMonthlySummaryTable(summaryData, {
      tableId: "monthlySummaryTable",
      showGrowthRate: false
    });

    console.log("‚úÖ Statistics summary rendered with new modules");
  } catch (error) {
    console.error("‚ùå Error rendering modular summary:", error);
    // Fallback to legacy method
    renderExpenseSummary(data, normalizeDate);
  }
}

// ‚úÖ T√ÅCH RI√äNG H√ÄM RENDER B·∫¢NG CHI PH√ç
function renderExpenseTable(data, formatDate) {
  const table1 = document.querySelector("#expenseListTable tbody");
  
  if (!table1) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y table #expenseListTable tbody");
    return;
  }

  // ‚úÖ C·∫≠p nh·∫≠t header theo y√™u c·∫ßu m·ªõi
  const tableHead = document.querySelector("#expenseListTable thead tr");
  if (tableHead) {
    tableHead.innerHTML = `
      <th>M√£ chi ph√≠</th>
      <th>Ng√†y chi</th>
      <th>Lo·∫°i k·∫ø to√°n</th>
      <th>Ph√¢n b·ªï</th>
      <th>Th√¥ng tin kho·∫£n chi</th>
      <th>S·ªë ti·ªÅn</th>
      <th>Chi ti·∫øt ng√¢n h√†ng</th>
      <th>Ng√†y t√°i t·ª•c</th>
      <th>Ng∆∞·ªùi nh·∫≠n/Nh√† cung c·∫•p</th>
      <th>Ghi ch√∫</th>
      <th>Thao t√°c</th>
    `;
  }

  const today = new Date();

  // ‚úÖ S·∫Øp x·∫øp chi ph√≠ m·ªõi nh·∫•t l√™n ƒë·∫ßu (timestamp gi·∫£m d·∫ßn)
  const sortedData = [...(data || [])].sort((a, b) => {
    const timestampA = (a.expenseId || "").replace(/[^0-9]/g, "");
    const timestampB = (b.expenseId || "").replace(/[^0-9]/g, "");
    return timestampB.localeCompare(timestampA);
  });

  // ‚úÖ Logic ph√¢n trang
  const itemsPerPage = window.itemsPerPage || 50;
  const totalPages = Math.ceil(sortedData.length / itemsPerPage);
  const currentPage = window.currentExpensePage || 1;

  const startIndex = (currentPage - 1) * itemsPerPage;
  const endIndex = startIndex + itemsPerPage;
  const paginatedItems = sortedData.slice(startIndex, endIndex);

  table1.innerHTML = "";

  paginatedItems.forEach((e, index) => {
    const globalIndex = startIndex + index;
    const row = table1.insertRow();

    // ‚úÖ Th√™m style cho d√≤ng ƒë√£ h·∫øt h·∫°n t√°i t·ª•c
    if (e.renewDate) {
      const parseDate = (str) => {
        const [y, m, d] = (str || "").split("/").map(Number);
        return new Date(y, m - 1, d);
      };
      const renewDate = parseDate(e.renewDate);
      if (renewDate < today) {
        row.classList.add("expired-row");
      }
    }

    // ‚úÖ Th√™m style m√†u v√†ng nh·∫°t cho tr·∫°ng th√°i "ch∆∞a thanh to√°n"
    if (e.status && e.status.toLowerCase().includes("ch∆∞a thanh to√°n")) {
      row.style.backgroundColor = "#fff9c4"; // M√†u v√†ng nh·∫°t
    }

    // ‚úÖ C√ÅC C·ªòT THEO TH·ª® T·ª∞ Y√äU C·∫¶U:
    // 1. M√£ chi ph√≠
    row.insertCell().textContent = e.expenseId || "";
    
    // 2. Ng√†y chi
    row.insertCell().textContent = formatDate(e.date);
    
    // 3. Lo·∫°i k·∫ø to√°n
    row.insertCell().textContent = e.accountingType || "";
    
    // 4. Ph√¢n b·ªï (hi·ªÉn th·ªã v·ªõi icon)
    const allocationCell = row.insertCell();
    if (e.periodicAllocation === "C√≥") {
      allocationCell.innerHTML = '<span style="color: #28a745;">‚úì C√≥</span>';
    } else {
      allocationCell.innerHTML = '<span style="color: #6c757d;">‚úó Kh√¥ng</span>';
    }
    
    // 5. Th√¥ng tin kho·∫£n chi (g·ªôp 4 tr∆∞·ªùng: type, category, product, package)
    const expenseInfoParts = [
      e.type || "",
      e.category || "",
      e.product || "",
      e.package || ""
    ].filter(part => part.trim() !== ""); // Lo·∫°i b·ªè c√°c ph·∫ßn r·ªóng
    
    const expenseInfoCell = row.insertCell();
    expenseInfoCell.textContent = expenseInfoParts.join(" - ");
    
    // 6. S·ªë ti·ªÅn (v·ªõi ƒë∆°n v·ªã ti·ªÅn t·ªá)
    row.insertCell().textContent = `${(e.amount || 0).toLocaleString()} ${e.currency || ""}`;
    
    // 7. Chi ti·∫øt ng√¢n h√†ng (g·ªôp bank v√† card/account info)
    const bankDetailsParts = [
      e.bank || "",
      e.cardInfo || e.accountInfo || ""
    ].filter(part => part.trim() !== "");
    
    const bankDetailsCell = row.insertCell();
    bankDetailsCell.textContent = bankDetailsParts.join(" - ") || "--";
    
    // 8. Ng√†y t√°i t·ª•c
    row.insertCell().textContent = formatDate(e.renewDate);
    
    // 9. Ng∆∞·ªùi nh·∫≠n/Nh√† cung c·∫•p
    row.insertCell().textContent = e.supplier || "--";
    
    // 10. Ghi ch√∫
    row.insertCell().textContent = e.note || "";

    // 11. Thao t√°c
    const actionCell = row.insertCell();
    const select = document.createElement("select");
    select.className = "action-select";

    const actions = [
      { value: "", label: "-- Ch·ªçn --" },
      { value: "view", label: "Xem" },
      { value: "edit", label: "S·ª≠a" },
      { value: "delete", label: "X√≥a" }
    ];

    actions.forEach(action => {
      const opt = document.createElement("option");
      opt.value = action.value;
      opt.textContent = action.label;
      select.appendChild(opt);
    });

    select.addEventListener("change", () => {
      const selected = select.value;
      if (selected === "edit" && typeof window.editExpenseRow === "function") {
        window.editExpenseRow(e);
      } else if (selected === "delete" && typeof window.handleDeleteExpense === "function") {
        window.handleDeleteExpense(e.expenseId);
      } else if (selected === "view" && typeof window.viewExpenseRow === "function") {
        window.viewExpenseRow(e);
      }
      select.value = "";
    });

    actionCell.appendChild(select);
  });

  // ‚úÖ C·∫≠p nh·∫≠t ph√¢n trang (gi·ªëng nh∆∞ code c≈©)
  updateExpensePagination(totalPages, currentPage);
}

// ‚úÖ T√ÅCH RI√äNG H√ÄM RENDER B·∫¢NG TH·ªêNG K√ä
function renderExpenseSummary(data, normalizeDate) {
  const table2 = document.querySelector("#monthlySummaryTable tbody");
  if (table2) {
    table2.innerHTML = "";

    const summaryMap = {};
    data.forEach(e => {
      if (e.currency === "VND") {
        const normalizedDate = normalizeDate(e.date);
        const month = normalizedDate.slice(0, 7); // yyyy/mm
        const key = `${month}|${e.type}`;
        summaryMap[key] = (summaryMap[key] || 0) + (parseFloat(e.amount) || 0);
      }
    });

    Object.entries(summaryMap).forEach(([key, value]) => {
      const [month, type] = key.split("|");
      const row = table2.insertRow();
      row.innerHTML = `
        <td>${month}</td>
        <td>${type}</td>
        <td>${value.toLocaleString()} VND</td>
      `;
    });
  }
}

// ‚úÖ H√ÄM PH√ÇN TRANG ƒê∆†N GI·∫¢N
function updateExpensePagination(totalPages, currentPage) {
  const pagination = document.getElementById("expensePagination");
  if (!pagination) return;

  pagination.innerHTML = "";

  // Th√™m n√∫t "T·∫•t c·∫£" n·∫øu ƒëang trong tr·∫°ng th√°i t√¨m ki·∫øm
  if (window.isExpenseSearching) {
    const allBtn = document.createElement("button");
    allBtn.textContent = "T·∫•t c·∫£";
    allBtn.style.marginRight = "10px";
    allBtn.style.backgroundColor = "#28a745";
    allBtn.addEventListener("click", () => {
      window.isExpenseSearching = false;
      window.currentExpensePage = 1;
      renderExpenseStats();
    });
    pagination.appendChild(allBtn);
  }

  if (totalPages <= 1) return;

  const refreshExpenseTable = () => renderExpenseStats();

  // T·∫°o c√°c n√∫t ph√¢n trang
  for (let i = 1; i <= Math.min(totalPages, 10); i++) {
    const pageButton = document.createElement("button");
    pageButton.textContent = i;
    pageButton.onclick = () => {
      window.currentExpensePage = i;
      refreshExpenseTable();
    };
    if (i === currentPage) {
      pageButton.classList.add("active");
    }
    pagination.appendChild(pageButton);
  }
}

// ‚úÖ KH·ªûI T·∫†O STATISTICS UI CONTROLLER KHI MODULE ƒê∆Ø·ª¢C LOAD
document.addEventListener('DOMContentLoaded', () => {
  // Lazy load UI controller to avoid circular imports
  import('./statisticsUIController.js').then(module => {
    if (module.initializeStatisticsUI) {
      console.log("üéÆ Initializing statistics UI controller...");
      module.initializeStatisticsUI();
    }
  }).catch(error => {
    console.warn("‚ö†Ô∏è Could not load statistics UI controller:", error);
  });
});