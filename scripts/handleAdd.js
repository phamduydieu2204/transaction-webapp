// handleAdd.js

import { apiRequestJson } from './apiClient.js';
import { showResultModal } from './showResultModal.js';
import { updateTable } from './updateTable.js';
import { formatDate } from './formatDate.js';
import { editTransaction } from './editTransaction.js';
import { deleteTransaction } from './deleteTransaction.js';
import { viewTransaction } from './viewTransaction.js';
import { openAddOrUpdateModal } from './handleAddOrUpdateModal.js';
import { updateState } from './core/stateManager.js';
import { validateBeforeOperation } from './core/sessionValidator.js';
import { cacheManager } from './core/cacheManager.js';
import { uiBlocker } from './uiBlocker.js';

// H√†m l·∫•y todayFormatted - lu√¥n l·∫•y ng√†y hi·ªán t·∫°i
function getTodayFormatted() {
  const today = new Date();
  return `${today.getFullYear()}/${String(today.getMonth() + 1).padStart(2, '0')}/${String(today.getDate()).padStart(2, '0')}`;
}

export async function handleAdd(userInfo, currentEditTransactionId, loadTransactions, handleReset, updatePackageList, showProcessingModal, showResultModal) {
  console.log("üîç handleAdd ƒë∆∞·ª£c g·ªçi");
  
  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒëang c·ªë th√™m giao d·ªãch ho√†n ti·ªÅn ho·∫∑c h·ªßy giao d·ªãch tr·ª±c ti·∫øp
  const transactionTypeElement = document.getElementById("transactionType");
  if (transactionTypeElement && (transactionTypeElement.value === "Ho√†n ti·ªÅn" || transactionTypeElement.value === "Ho√†n Ti·ªÅn")) {
    showResultModal("B·∫°n kh√¥ng th·ªÉ th√™m 1 giao d·ªãch Ho√†n ti·ªÅn. H√£y ch·ªçn C·∫≠p Nh·∫≠t", false);
    return;
  }
  if (transactionTypeElement && transactionTypeElement.value === "H·ªßy giao d·ªãch") {
    showResultModal("B·∫°n kh√¥ng th·ªÉ th√™m 1 giao d·ªãch H·ªßy giao d·ªãch. H√£y ch·ªçn C·∫≠p Nh·∫≠t", false);
    return;
  }
  
  // Ki·ªÉm tra n·∫øu ƒëang trong ti·∫øn tr√¨nh s·ª≠a th√¨ hi·ªÉn th·ªã modal ngay t·ª©c th√¨
  if (window.currentEditTransactionId !== null) {
    console.log("ƒêang trong ti·∫øn tr√¨nh s·ª≠a, m·ªü modal l·ª±a ch·ªçn th√™m/c·∫≠p nh·∫≠t...");
    openAddOrUpdateModal();
    return;
  }
  
  // Kh√≥a UI ngay khi b·∫Øt ƒë·∫ßu x·ª≠ l√Ω
  uiBlocker.block();
  
  try {
    // Validate session before adding transaction
    const sessionValid = await validateBeforeOperation();
    if (!sessionValid) {
      uiBlocker.unblock();
      return;
    }
  } catch (error) {
    uiBlocker.unblock();
    showResultModal(`L·ªói x√°c th·ª±c phi√™n: ${error.message}`, false);
    return;
  }
  
  // Always update to today's date for new transactions
  const { setDefaultDates } = await import('./calculateEndDate.js');
  setDefaultDates(true);
  console.log("üìÖ Updated dates to today for new transaction");

  if (!userInfo) {
    showResultModal("Kh√¥ng t√¨m th·∫•y th√¥ng tin nh√¢n vi√™n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.", false);
    uiBlocker.unblock();
    return;
  }

  // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
  const requiredFields = {
    customerEmail: "Email kh√°ch h√†ng",
    customerName: "T√™n kh√°ch h√†ng", 
    customerPhone: "Li√™n h·ªá",
    transactionDate: "Ng√†y giao d·ªãch",
    transactionType: "Lo·∫°i giao d·ªãch",
    duration: "S·ªë th√°ng ƒëƒÉng k√Ω",
    startDate: "Ng√†y b·∫Øt ƒë·∫ßu",
    softwareName: "T√™n ph·∫ßn m·ªÅm",
    softwarePackage: "G√≥i ph·∫ßn m·ªÅm",
    accountName: "T√™n t√†i kho·∫£n",
    revenue: "Doanh thu"
  };

  for (const [fieldId, fieldName] of Object.entries(requiredFields)) {
    const element = document.getElementById(fieldId);
    if (!element) {
      console.error(`Kh√¥ng t√¨m th·∫•y element v·ªõi id: ${fieldId}`);
      continue;
    }
    
    const value = element.value;
    
    // Ki·ªÉm tra ƒë·∫∑c bi·ªát cho c√°c tr∆∞·ªùng s·ªë
    if (fieldId === 'revenue' || fieldId === 'duration') {
      const numValue = parseFloat(value);
      if (isNaN(numValue) || numValue <= 0) {
        showResultModal("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc, vui l√≤ng ki·ªÉm tra l·∫°i", false);
        element.focus();
        uiBlocker.unblock();
        return;
      }
    } else {
      // Ki·ªÉm tra c√°c tr∆∞·ªùng text/select
      if (!value || value.trim() === "" || value === "0") {
        showResultModal("Thi·∫øu d·ªØ li·ªáu b·∫Øt bu·ªôc, vui l√≤ng ki·ªÉm tra l·∫°i", false);
        element.focus();
        uiBlocker.unblock();
        return;
      }
    }
  }

  // Kh√¥ng c·∫ßn g·ªçi showProcessingModal v√¨ ƒë√£ c√≥ uiBlocker

  const transactionType = document.getElementById("transactionType").value;
  let note = document.getElementById("note").value;

  if (transactionType === "Ho√†n Ti·ªÅn" && currentEditTransactionId) {
    note = note ? `${note}\nHo√†n ti·ªÅn cho ƒë∆°n h√†ng c√≥ m√£ giao d·ªãch ${currentEditTransactionId}` : `Ho√†n ti·ªÅn cho ƒë∆°n h√†ng c√≥ m√£ giao d·ªãch ${currentEditTransactionId}`;
  }

  const data = {
    action: "addTransaction",
    transactionType: transactionType,
    transactionDate: document.getElementById("transactionDate").value || todayFormatted,
    customerName: document.getElementById("customerName").value,
    customerEmail: document.getElementById("customerEmail").value.toLowerCase(),
    customerPhone: document.getElementById("customerPhone").value,
    duration: parseInt(document.getElementById("duration").value) || 0,
    startDate: document.getElementById("startDate").value,
    endDate: document.getElementById("endDate").value,
    deviceCount: parseInt(document.getElementById("deviceCount").value) || 0,
    softwareName: document.getElementById("softwareName").value,
    softwarePackage: document.getElementById("softwarePackage").value,
    accountName: document.getElementById("accountName").value,
    revenue: parseFloat(document.getElementById("revenue").value) || 0,
    note: note,
    tenNhanVien: userInfo.tenNhanVien,
    maNhanVien: userInfo.maNhanVien,
    originalTransactionId: transactionType === "Ho√†n Ti·ªÅn" ? currentEditTransactionId : null
  };

  console.log("üì§ D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(data, null, 2));

  try {
    const result = await apiRequestJson(data);
    if (result.status === "success") {
      // T·∫°o object giao d·ªãch m·ªõi v·ªõi data t·ª´ server
      const newTransaction = {
        transactionId: result.transactionId || `GD${Date.now()}`,
        ...data,
        transactionDate: data.transactionDate,
        timestamp: Date.now()
      };
      
      // Th√™m giao d·ªãch m·ªõi v√†o ƒë·∫ßu danh s√°ch (optimistic update)
      if (!window.transactionList) {
        window.transactionList = [];
      }
      window.transactionList.unshift(newTransaction);
      
      // Update table ngay l·∫≠p t·ª©c
      updateTable(window.transactionList, 1, window.itemsPerPage || 10, 
                 formatDate, editTransaction, deleteTransaction, viewTransaction);
      
      // Reset form v√† c√°c dropdown
      document.getElementById("transactionForm").reset();
      document.getElementById("softwareName").value = "";
      document.getElementById("softwarePackage").innerHTML = '<option value="">-- Ch·ªçn g√≥i --</option>';
      document.getElementById("accountName").innerHTML = '<option value="">-- Ch·ªçn t√†i kho·∫£n --</option>';
      
      // Reset currentEditTransactionId
      window.currentEditTransactionId = null;
      updateState({ currentEditTransactionId: null });
      
      // Clear cache
      cacheManager.clearTransactionCaches();
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      showResultModal("Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u!", true);
      
      // Load l·∫°i data t·ª´ server trong background ƒë·ªÉ ƒë·ªìng b·ªô
      setTimeout(() => {
        window.loadTransactions();
      }, 1000);
    } else {
      showResultModal(result.message || "Kh√¥ng th·ªÉ l∆∞u giao d·ªãch!", false);
    }
  } catch (err) {
    showResultModal(`L·ªói k·∫øt n·ªëi server: ${err.message}`, false);
    console.error("L·ªói:", err);
  } finally {
    // Lu√¥n m·ªü kh√≥a UI khi k·∫øt th√∫c
    uiBlocker.unblock();
  }
}
