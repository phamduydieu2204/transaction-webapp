import { getConstants } from './constants.js';
import { showProcessingModal } from './showProcessingModal.js';
import { showResultModal } from './showResultModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';
import { renderExpenseStats } from './renderExpenseStats.js';

export async function handleSearchExpense() {
  const getValue = (id) => document.getElementById(id)?.value?.trim() || "";
  
  // Ki·ªÉm tra c√≥ ph·∫£i admin kh√¥ng
  const isAdmin = window.userInfo && window.userInfo.vaiTro && window.userInfo.vaiTro.toLowerCase() === "admin";
  
  if (!isAdmin) {
    // console.log("‚ö†Ô∏è Kh√¥ng ph·∫£i admin - m·ªôt s·ªë ƒëi·ªÅu ki·ªán t√¨m ki·∫øm chi ph√≠ s·∫Ω b·ªã b·ªè qua: ng√†y chi ph√≠, s·∫£n ph·∫©m, g√≥i");
  }

  // L·∫•y gi√° tr·ªã t·ª´ tr∆∞·ªùng ghi ch√∫ ƒë·ªÉ ki·ªÉm tra t√¨m ki·∫øm to√†n c·ª•c
  const expenseNote = getValue("expenseNote");
  
  // Ki·ªÉm tra c√°c tr∆∞·ªùng kh√°c c√≥ ƒë∆∞·ª£c nh·∫≠p kh√¥ng
  const otherFields = [
    isAdmin ? getValue("expenseDate") : "",
    getValue("expenseCategory"),
    getValue("expenseSubCategory"),
    isAdmin ? getValue("expenseProduct") : "",
    isAdmin ? getValue("expensePackage") : "",
    getValue("expenseAmount"),
    getValue("expenseCurrency"),
    getValue("expenseBank"),
    getValue("expenseCard"),
    getValue("expenseRecurring"),
    getValue("expenseRenewDate"),
    getValue("expenseSupplier"),
    getValue("expenseStatus")
  ].filter(val => val && val !== "" && val !== "0" && val !== "yyyy/mm/dd");
  
  // Ki·ªÉm tra n·∫øu ch·ªâ c√≥ tr∆∞·ªùng ghi ch√∫ ƒë∆∞·ª£c nh·∫≠p -> T√¨m ki·∫øm to√†n c·ª•c
  const isGlobalSearch = expenseNote && otherFields.length === 0;
  
  showProcessingModal(isGlobalSearch ? 
    `üåç T√¨m ki·∫øm to√†n c·ª•c cho: "${expenseNote}"...` : 
    "ƒêang t√¨m ki·∫øm chi ph√≠...");
  const { BACKEND_URL } = getConstants();
  
  // L·∫•y c√°c ƒëi·ªÅu ki·ªán t√¨m ki·∫øm t·ª´ form
  const conditions = {};
  
  if (isGlobalSearch) {
    // T√¨m ki·∫øm to√†n c·ª•c - ch·ªâ g·ª≠i text c·∫ßn t√¨m
    conditions.globalSearchText = expenseNote;
// console.log("üåç T√¨m ki·∫øm to√†n c·ª•c v·ªõi t·ª´ kh√≥a:", expenseNote);
  } else {
    // T√¨m ki·∫øm th√¥ng th∆∞·ªùng theo t·ª´ng tr∆∞·ªùng c·ª• th·ªÉ
    // console.log("üîç T√¨m ki·∫øm theo tr∆∞·ªùng c·ª• th·ªÉ");
    
    // Ch·ªâ th√™m ƒëi·ªÅu ki·ªán n·∫øu ng∆∞·ªùi d√πng ƒë√£ nh·∫≠p gi√° tr·ªã (v√† ƒë·ªëi v·ªõi m·ªôt s·ªë field ch·ªâ admin m·ªõi ƒë∆∞·ª£c t√¨m)
    const expenseDate = isAdmin ? getValue("expenseDate") : "";
    if (expenseDate && expenseDate !== "yyyy/mm/dd") conditions.expenseDate = expenseDate;
    
    const expenseCategory = getValue("expenseCategory");
    if (expenseCategory) conditions.expenseCategory = expenseCategory;
    
    const expenseSubCategory = getValue("expenseSubCategory");
    if (expenseSubCategory) conditions.expenseSubCategory = expenseSubCategory;
    
    const expenseProduct = isAdmin ? getValue("expenseProduct") : "";
    if (expenseProduct) conditions.expenseProduct = expenseProduct;
    
    const expensePackage = isAdmin ? getValue("expensePackage") : "";
    if (expensePackage) conditions.expensePackage = expensePackage;
    
    const expenseAmount = getValue("expenseAmount");
    if (expenseAmount && expenseAmount !== "0") conditions.expenseAmount = expenseAmount;
    
    const expenseCurrency = getValue("expenseCurrency");
    // Ch·ªâ th√™m n·∫øu kh√¥ng ph·∫£i gi√° tr·ªã m·∫∑c ƒë·ªãnh t√¨m ki·∫øm
    if (expenseCurrency && expenseCurrency !== "") conditions.expenseCurrency = expenseCurrency;
    
    const expenseBank = getValue("expenseBank");
    if (expenseBank) conditions.expenseBank = expenseBank;
    
    const expenseCard = getValue("expenseCard");
    if (expenseCard) conditions.expenseCard = expenseCard;
    
    const expenseRecurring = getValue("expenseRecurring");
    // Ch·ªâ th√™m n·∫øu kh√¥ng ph·∫£i gi√° tr·ªã m·∫∑c ƒë·ªãnh t√¨m ki·∫øm
    if (expenseRecurring && expenseRecurring !== "") conditions.expenseRecurring = expenseRecurring;
    
    const expenseRenewDate = getValue("expenseRenewDate");
    // Backend expect t√™n tr∆∞·ªùng l√† expenseRenewDate nh∆∞ng tr·∫£ v·ªÅ l√† renewDate
    if (expenseRenewDate && expenseRenewDate !== "yyyy/mm/dd") conditions.expenseRenewDate = expenseRenewDate;
    
    const expenseSupplier = getValue("expenseSupplier");
    if (expenseSupplier) conditions.expenseSupplier = expenseSupplier;
    
    const expenseStatus = getValue("expenseStatus");
    // Ch·ªâ th√™m n·∫øu kh√¥ng ph·∫£i gi√° tr·ªã m·∫∑c ƒë·ªãnh t√¨m ki·∫øm
    if (expenseStatus && expenseStatus !== "") conditions.expenseStatus = expenseStatus;
    
    // Th√™m ghi ch√∫ v√†o ƒëi·ªÅu ki·ªán t√¨m ki·∫øm c·ª• th·ªÉ
    if (expenseNote) conditions.expenseNote = expenseNote;
  }

  // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o ƒë∆∞·ª£c nh·∫≠p
  const hasConditions = Object.keys(conditions).length > 0;
  
  if (!hasConditions) {
    // console.log("üìã Kh√¥ng c√≥ ƒëi·ªÅu ki·ªán t√¨m ki·∫øm - s·∫Ω l·∫•y t·∫•t c·∫£ chi ph√≠");
  }

  const data = {
    action: isGlobalSearch ? "globalSearchExpenses" : "searchExpenses",
    maNhanVien: window.userInfo?.maNhanVien || "",
    conditions: conditions
  };

// console.log("üì§ T√¨m ki·∫øm chi ph√≠ v·ªõi ƒëi·ªÅu ki·ªán:", JSON.stringify(data, null, 2));

  try {
    const res = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(data)
    });

    const result = await res.json();
    closeProcessingModal();
    
    if (result.status === "success") {
      window.expenseList = result.data || [];
      window.currentExpensePage = 1;
      window.isExpenseSearching = hasConditions; // Ch·ªâ ƒë√°nh d·∫•u l√† ƒëang t√¨m ki·∫øm n·∫øu c√≥ ƒëi·ªÅu ki·ªán
      
      // C·∫≠p nh·∫≠t table ngay l·∫≠p t·ª©c
      if (typeof window.updateExpenseTable === 'function') {
        window.updateExpenseTable();
      }
      
      // G·ªçi renderExpenseStats ƒë·ªÉ hi·ªÉn th·ªã k·∫øt qu·∫£
      renderExpenseStats();
      
      // Th√¥ng b√°o kh√°c nhau t√πy theo lo·∫°i t√¨m ki·∫øm
      if (isGlobalSearch) {
        showResultModal(`T√¨m ki·∫øm to√†n c·ª•c th√†nh c√¥ng! T√¨m th·∫•y ${result.data.length} chi ph√≠ ch·ª©a "${expenseNote}".`, true);
      } else if (hasConditions) {
        showResultModal(`T√¨m ki·∫øm th√†nh c√¥ng! T√¨m th·∫•y ${result.data.length} chi ph√≠ ph√π h·ª£p.`, true);
      } else {
        showResultModal(`ƒê√£ t·∫£i ${result.data.length} chi ph√≠.`, true);
      }
    } else {
      showResultModal(result.message || "Kh√¥ng th·ªÉ t√¨m ki·∫øm chi ph√≠!", false);
    }
  } catch (err) {
    console.error("L·ªói khi t√¨m ki·∫øm chi ph√≠", err);
    showResultModal(`L·ªói khi t√¨m ki·∫øm chi ph√≠: ${err.message}`, false);
  }
}