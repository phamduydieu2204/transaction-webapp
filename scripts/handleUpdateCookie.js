import { getConstants } from './constants.js';
import { showResultModal } from './showResultModal.js';
import { showProcessingModal } from './showProcessingModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';

export async function handleUpdateCookie(index, transactionList) {
  console.log('üç™ handleUpdateCookie called with:', { index, transactionListLength: transactionList?.length });
  
  const transaction = transactionList?.[index];
  console.log('üç™ Found transaction:', transaction);
  
  if (!transaction) {
    console.error('‚ùå No transaction found at index:', index);
    return alert("Kh√¥ng t√¨m th·∫•y giao d·ªãch.");
  }

  const modal = document.getElementById("updateCookieModal");
  console.log('üç™ Modal found:', !!modal);
  const currentCookieEl = document.getElementById("currentCookie");
  const newCookieEl = document.getElementById("newCookie");

  currentCookieEl.value = "";
  newCookieEl.value = "";
  window.currentCookieTransaction = transaction;

  // L·∫•y cookie hi·ªán t·∫°i
  try {
    const { BACKEND_URL } = getConstants();
    showProcessingModal("ƒêang t·∫£i cookie...");
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "getCookie",
        accountSheetId: transaction.accountSheetId
      })
    });
    const result = await response.json();
    currentCookieEl.value = result.cookie || "(Kh√¥ng c√≥ d·ªØ li·ªáu)";
    closeProcessingModal();
    modal.style.display = "block";
  } catch (err) {
    closeProcessingModal();
    showResultModal("Kh√¥ng th·ªÉ t·∫£i cookie: " + err.message, false);
  }
}

export function copyCurrentCookie() {
  console.log('üç™ copyCurrentCookie called');
  
  const val = document.getElementById("currentCookie").value;
  console.log('üç™ Current cookie value:', val);
  
  if (!val || val === "(Kh√¥ng c√≥ d·ªØ li·ªáu)") {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ cookie ƒë·ªÉ sao ch√©p!", false);
    return;
  }
  
  navigator.clipboard.writeText(val).then(() => {
    console.log('‚úÖ Cookie copied successfully');
    showResultModal("‚úÖ ƒê√£ sao ch√©p cookie th√†nh c√¥ng!", true);
  }).catch((err) => {
    console.error('‚ùå Copy failed:', err);
    showResultModal("‚ùå Kh√¥ng th·ªÉ sao ch√©p cookie!", false);
  });
}

export function testCurrentCookie() {
  console.log('üß™ testCurrentCookie called');
  
  const val = document.getElementById("currentCookie").value;
  console.log('üß™ Cookie to test:', val);
  
  if (!val || val === "(Kh√¥ng c√≥ d·ªØ li·ªáu)") {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ cookie ƒë·ªÉ test!", false);
    return;
  }
  
  // Store cookie for testing
  window.currentTestCookie = val;
  
  // Show test modal
  const testModal = document.getElementById("testCookieModal");
  if (testModal) {
    testModal.style.display = "block";
    
    // Reset form
    document.getElementById("testWebsite").value = "";
    document.getElementById("customWebsite").value = "";
    document.getElementById("customWebsiteDiv").style.display = "none";
    document.getElementById("testResults").style.display = "none";
    
    // Add website change handler
    const websiteSelect = document.getElementById("testWebsite");
    websiteSelect.onchange = function() {
      const customDiv = document.getElementById("customWebsiteDiv");
      if (this.value === "custom") {
        customDiv.style.display = "block";
      } else {
        customDiv.style.display = "none";
      }
    };
  } else {
    console.error('‚ùå Test cookie modal not found');
    showResultModal("‚ùå Kh√¥ng t√¨m th·∫•y modal test cookie!", false);
  }
}

export async function confirmUpdateCookie() {
  console.log('üç™ confirmUpdateCookie called');
  
  try {
    disableInteraction();
    const transaction = window.currentCookieTransaction;
    console.log('üç™ Current transaction:', transaction);
    
    const newCookieEl = document.getElementById("newCookie");
    console.log('üç™ New cookie element found:', !!newCookieEl);
    
    const newCookie = newCookieEl?.value.trim();
    console.log('üç™ New cookie value:', newCookie);

    if (!transaction || !transaction.transactionId) {
      console.error('‚ùå No transaction or transaction ID');
      enableInteraction();
      return;
    }
    
    // Ki·ªÉm tra cookie m·ªõi c√≥ r·ªóng kh√¥ng
    if (!newCookie) {
      console.log('‚ùå Empty cookie');
      enableInteraction();
      console.log('üîî Showing alert for empty cookie');
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p cookie m·ªõi tr∆∞·ªõc khi c·∫≠p nh·∫≠t!");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }
    
    // Ki·ªÉm tra cookie c√≥ qu√° ng·∫Øn kh√¥ng (c√≥ th·ªÉ l√† l·ªói)
    if (newCookie.length < 10) {
      console.log('‚ùå Cookie too short');
      enableInteraction();
      console.log('üîî Showing alert for short cookie');
      alert("‚ö†Ô∏è Cookie c√≥ v·∫ª qu√° ng·∫Øn. Vui l√≤ng ki·ªÉm tra l·∫°i!");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }
    
    // Ki·ªÉm tra cookie c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát c·∫ßn thi·∫øt kh√¥ng
    if (!newCookie.includes('=')) {
      console.log('‚ùå Cookie invalid format');
      enableInteraction();
      alert("‚ö†Ô∏è Cookie c√≥ v·∫ª kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Cookie th∆∞·ªùng ch·ª©a d·∫•u '='.");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }

    console.log('‚úÖ All validations passed, proceeding with update');
    
    const { BACKEND_URL } = getConstants();
    showProcessingModal("ƒêang c·∫≠p nh·∫≠t Cookie...");
    
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookie",
        transactionId: transaction.transactionId,
        accountSheetId: transaction.accountSheetId,
        newCookie: newCookie,
        type: "confirm"
      })
    });
    
    const result = await response.json();
    console.log('üç™ Update result:', result);
    
    closeProcessingModal();
    
    if (result.status === "success") {
      showResultModal("‚úÖ C·∫≠p nh·∫≠t cookie th√†nh c√¥ng!\n\nCookie m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u cho giao d·ªãch " + transaction.transactionId, true);
      // Ch·ªâ ƒë√≥ng modal khi th√†nh c√¥ng
      enableInteraction();
      closeUpdateCookieModal();
    } else {
      showResultModal("‚ùå " + (result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cookie"), false);
      // Kh√¥ng ƒë√≥ng modal khi th·∫•t b·∫°i, ƒë·ªÉ user th·ª≠ l·∫°i
      enableInteraction();
    }
    
  } catch (err) {
    console.error('‚ùå Error in confirmUpdateCookie:', err);
    closeProcessingModal();
    showResultModal("‚ùå L·ªói khi c·∫≠p nh·∫≠t cookie: " + err.message, false);
    // Kh√¥ng ƒë√≥ng modal khi c√≥ l·ªói, ƒë·ªÉ user th·ª≠ l·∫°i
    enableInteraction();
  }
}

export async function cancelUpdateCookie() {
  console.log('üç™ cancelUpdateCookie called');
  
  try {
    disableInteraction();
    const transaction = window.currentCookieTransaction;
    console.log('üç™ Cancel transaction:', transaction);
    
    if (!transaction?.transactionId) {
      console.log('‚ùå No transaction to cancel');
      enableInteraction();
      closeUpdateCookieModal();
      return;
    }

    const { BACKEND_URL } = getConstants();
    await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookie",
        transactionId: transaction.transactionId,
        type: "cancel"
      })
    });
    console.log('‚úÖ Cancel log sent successfully');
    
  } catch (err) {
    console.warn("‚ùå Kh√¥ng th·ªÉ g·ª≠i log h·ªßy c·∫≠p nh·∫≠t cookie:", err.message);
  } finally {
    enableInteraction();
    closeUpdateCookieModal();
  }
}

export function closeUpdateCookieModal() {
  console.log('üç™ closeUpdateCookieModal called');
  const modal = document.getElementById("updateCookieModal");
  if (modal) {
    modal.style.display = "none";
    console.log('‚úÖ Modal closed');
  } else {
    console.error('‚ùå Modal not found');
  }
}

export function closeTestCookieModal() {
  console.log('üß™ closeTestCookieModal called');
  const modal = document.getElementById("testCookieModal");
  if (modal) {
    modal.style.display = "none";
    console.log('‚úÖ Test modal closed');
  } else {
    console.error('‚ùå Test modal not found');
  }
}

// Helper function to parse and analyze cookie format
function parseCookieData(cookieString) {
  console.log('üç™ Parsing cookie data...');
  
  let cookieData = {
    format: 'unknown',
    cookies: [],
    isValid: false,
    keyInfo: {}
  };
  
  // Try to parse as JSON first (Edit This Cookie format)
  try {
    const jsonCookies = JSON.parse(cookieString.trim());
    if (Array.isArray(jsonCookies) && jsonCookies.length > 0) {
      cookieData.format = 'json';
      cookieData.cookies = jsonCookies;
      cookieData.isValid = true;
      
      // Analyze key cookies for Helium10
      cookieData.keyInfo = analyzeCookiesForSite(jsonCookies);
      
      console.log('‚úÖ Parsed as JSON format:', cookieData);
      return cookieData;
    }
  } catch (e) {
    console.log('Not JSON format, trying string format...');
  }
  
  // Try to parse as cookie string format
  if (cookieString.includes('=')) {
    cookieData.format = 'string';
    cookieData.isValid = true;
    
    // Convert string to array format
    const pairs = cookieString.split(';').map(pair => {
      const [name, value] = pair.trim().split('=');
      return { name: name?.trim(), value: value?.trim() };
    }).filter(cookie => cookie.name && cookie.value);
    
    cookieData.cookies = pairs;
    console.log('‚úÖ Parsed as string format:', cookieData);
    return cookieData;
  }
  
  console.log('‚ùå Unknown cookie format');
  return cookieData;
}

// Analyze cookies for specific sites
function analyzeCookiesForSite(cookies) {
  const analysis = {
    authCookies: [],
    sessionCookies: [],
    importantCookies: [],
    totalCount: cookies.length
  };
  
  cookies.forEach(cookie => {
    const name = cookie.name?.toLowerCase() || '';
    
    // Authentication related cookies
    if (name.includes('identity') || name.includes('auth') || name.includes('session') || name === 'sid') {
      analysis.authCookies.push(cookie);
    }
    
    // Session related cookies  
    if (name.includes('session') || name === 'sid' || name.includes('csrf')) {
      analysis.sessionCookies.push(cookie);
    }
    
    // Important cookies for Helium10
    if (['_identity', 'sid', '_csrf', 'dsik'].includes(name)) {
      analysis.importantCookies.push(cookie);
    }
  });
  
  return analysis;
}

export async function runCookieTest() {
  console.log('üß™ runCookieTest called');
  
  const websiteSelect = document.getElementById("testWebsite");
  const customWebsite = document.getElementById("customWebsite");
  const cookie = window.currentTestCookie;
  
  if (!websiteSelect.value) {
    showResultModal("‚ö†Ô∏è Vui l√≤ng ch·ªçn website ƒë·ªÉ test!", false);
    return;
  }
  
  let targetWebsite = "";
  if (websiteSelect.value === "custom") {
    if (!customWebsite.value.trim()) {
      showResultModal("‚ö†Ô∏è Vui l√≤ng nh·∫≠p URL website!", false);
      return;
    }
    targetWebsite = customWebsite.value.trim();
  } else {
    targetWebsite = websiteSelect.value;
  }
  
  console.log('üß™ Testing cookie on:', targetWebsite);
  
  // Show loading
  const resultsDiv = document.getElementById("testResults");
  const resultsContent = document.getElementById("testResultsContent");
  
  resultsDiv.style.display = "block";
  resultsDiv.className = "test-results";
  resultsContent.innerHTML = "üîÑ ƒêang ph√¢n t√≠ch cookie...";
  
  // Parse cookie data first
  const cookieData = parseCookieData(cookie);
  
  if (!cookieData.isValid) {
    resultsDiv.className = "test-results error";
    resultsContent.innerHTML = `
      ‚ùå <strong>Cookie kh√¥ng h·ª£p l·ªá</strong><br>
      ƒê·ªãnh d·∫°ng kh√¥ng ƒë∆∞·ª£c nh·∫≠n di·ªán. Vui l√≤ng s·ª≠ d·ª•ng:<br>
      ‚Ä¢ JSON Array t·ª´ Edit This Cookie<br>
      ‚Ä¢ Ho·∫∑c string format: name=value; name2=value2
    `;
    return;
  }
  
  // Show initial analysis
  resultsContent.innerHTML = `
    üîÑ ƒêang ki·ªÉm tra cookie...<br>
    üìä ƒê·ªãnh d·∫°ng: ${cookieData.format.toUpperCase()}<br>
    üìà T·ªïng s·ªë cookies: ${cookieData.cookies.length}<br>
    ${cookieData.keyInfo.authCookies?.length > 0 ? `üîê Auth cookies: ${cookieData.keyInfo.authCookies.length}<br>` : ''}
  `;
  
  try {
    // Check if backend supports testCookie action
    const { BACKEND_URL } = getConstants();
    
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "testCookie",
        website: targetWebsite,
        cookieData: cookieData,
        originalCookie: cookie
      })
    });
    
    const result = await response.json();
    console.log('üß™ Test result:', result);
    
    // Check if backend doesn't support testCookie yet
    if (result.message && result.message.includes("kh√¥ng h·ª£p l·ªá")) {
      // Mock response for demonstration
      const mockSuccess = cookieData.keyInfo.importantCookies?.length > 0;
      
      if (mockSuccess) {
        resultsDiv.className = "test-results success";
        resultsContent.innerHTML = `
          ‚úÖ <strong>Cookie ph√¢n t√≠ch th√†nh c√¥ng!</strong><br>
          üåê Website: ${targetWebsite}<br>
          üìä Format: ${cookieData.format.toUpperCase()} (${cookieData.cookies.length} cookies)<br>
          üîê Tr·∫°ng th√°i: ƒê√£ t√¨m th·∫•y auth cookies<br>
          üîë Key cookies: ${cookieData.keyInfo.importantCookies.map(c => c.name).join(', ')}<br>
          <br>
          <em>üí° Ch·ª©c nƒÉng test th·ª±c t·∫ø ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn. Hi·ªán t·∫°i ch·ªâ ph√¢n t√≠ch c·∫•u tr√∫c cookie.</em>
        `;
      } else {
        resultsDiv.className = "test-results error";
        resultsContent.innerHTML = `
          ‚ö†Ô∏è <strong>Cookie thi·∫øu th√¥ng tin quan tr·ªçng</strong><br>
          üåê Website: ${targetWebsite}<br>
          üìä Format: ${cookieData.format.toUpperCase()} (${cookieData.cookies.length} cookies)<br>
          ‚ùå Kh√¥ng t√¨m th·∫•y auth cookies quan tr·ªçng<br>
          üí° G·ª£i √Ω: C·∫ßn c√≥ cookies nh∆∞ _identity, sid, _csrf cho Helium10<br>
          <br>
          <em>üí° Ch·ª©c nƒÉng test th·ª±c t·∫ø ƒëang ƒë∆∞·ª£c ph√°t tri·ªÉn.</em>
        `;
      }
      return;
    }
    
    // Normal backend response
    if (result.status === "success") {
      resultsDiv.className = "test-results success";
      resultsContent.innerHTML = `
        ‚úÖ <strong>Cookie ho·∫°t ƒë·ªông t·ªët!</strong><br>
        üåê Website: ${targetWebsite}<br>
        üìä Format: ${cookieData.format.toUpperCase()} (${cookieData.cookies.length} cookies)<br>
        üîê Tr·∫°ng th√°i: ${result.loginStatus || "ƒê√£ ƒëƒÉng nh·∫≠p"}<br>
        ${result.userInfo ? `üë§ User: ${result.userInfo}<br>` : ''}
        ${result.details ? `üìù Chi ti·∫øt: ${result.details}<br>` : ''}
        ${cookieData.keyInfo.importantCookies?.length > 0 ? `üîë Key cookies: ${cookieData.keyInfo.importantCookies.map(c => c.name).join(', ')}` : ''}
      `;
    } else {
      resultsDiv.className = "test-results error";
      resultsContent.innerHTML = `
        ‚ùå <strong>Cookie kh√¥ng ho·∫°t ƒë·ªông</strong><br>
        üåê Website: ${targetWebsite}<br>
        üìä Format: ${cookieData.format.toUpperCase()} (${cookieData.cookies.length} cookies)<br>
        ‚ùå L·ªói: ${result.message || "Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p"}<br>
        ${result.details ? `üìù Chi ti·∫øt: ${result.details}<br>` : ''}
        ${result.suggestions ? `üí° G·ª£i √Ω: ${result.suggestions}` : ''}
      `;
    }
    
  } catch (err) {
    console.error('‚ùå Test failed:', err);
    resultsDiv.className = "test-results error";
    resultsContent.innerHTML = `
      ‚ùå <strong>L·ªói khi test cookie</strong><br>
      üìä ƒê√£ ph√¢n t√≠ch: ${cookieData.format.toUpperCase()} format (${cookieData.cookies.length} cookies)<br>
      ‚ùå Chi ti·∫øt l·ªói: ${err.message}<br>
      <em>üí° Cookie ƒë√£ ƒë∆∞·ª£c ph√¢n t√≠ch th√†nh c√¥ng, nh∆∞ng kh√¥ng th·ªÉ k·∫øt n·ªëi v·ªõi server test.</em>
    `;
  }
}

function disableInteraction() {
  console.log('üîí Disabling interaction');
  const overlay = document.getElementById("formOverlay");
  if (overlay) {
    overlay.style.display = "block";
  } else {
    console.error('‚ùå formOverlay not found');
  }
}

function enableInteraction() {
  console.log('üîì Enabling interaction'); 
  const overlay = document.getElementById("formOverlay");
  if (overlay) {
    overlay.style.display = "none";
  } else {
    console.error('‚ùå formOverlay not found');
  }
}
  