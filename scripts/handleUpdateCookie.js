import { getConstants } from './constants.js';
import { showResultModal } from './showResultModal.js';
import { showProcessingModal } from './showProcessingModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';

export async function handleUpdateCookie(index, transactionList) {
  
  const transaction = transactionList?.[index];
  
  if (!transaction) {
    console.error('‚ùå No transaction found at index:', index);
    return alert("Kh√¥ng t√¨m th·∫•y giao d·ªãch.");
  }

  const modal = document.getElementById("updateCookieModal");
  const currentCookieEl = document.getElementById("currentCookie");
  const newCookieEl = document.getElementById("newCookie");

  currentCookieEl.value = "";
  newCookieEl.value = "";
  window.currentCookieTransaction = transaction;

  // L·∫•y cookie hi·ªán t·∫°i v√† t√™n file
  try {
    const { BACKEND_URL } = getConstants();
    showProcessingModal("ƒêang t·∫£i cookie...");
    
      action: "getCookieAndFileName",
      accountSheetId: transaction.accountSheetId
    });
    
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "getCookieAndFileName",
        accountSheetId: transaction.accountSheetId
      })
    });
    const result = await response.json();
    
    
    // C·∫≠p nh·∫≠t cookie content
    currentCookieEl.value = result.cookie || "(Kh√¥ng c√≥ d·ªØ li·ªáu)";
    
    // C·∫≠p nh·∫≠t label v·ªõi t√™n file
    const currentCookieLabel = document.getElementById("currentCookieLabel");
    if (currentCookieLabel && result.fileName) {
      currentCookieLabel.textContent = result.fileName + ":";
    } else {
      currentCookieLabel.textContent = "Cookie hi·ªán t·∫°i:";
    }
    
    // L·∫•y th√¥ng tin username v√† password t·ª´ API
    try {
      const accountResponse = await fetch(BACKEND_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          action: "getAccountInfoBySoftware",
          softwareName: transaction.softwareName,
          softwarePackage: transaction.softwarePackage,
          accountName: transaction.accountName
        })
      });
      const accountResult = await accountResponse.json();
      
      
      // C·∫≠p nh·∫≠t username v√† password
      const usernameEl = document.getElementById("currentUsername");
      const passwordEl = document.getElementById("currentPassword");
      
      if (accountResult.status === "success") {
        if (usernameEl) usernameEl.value = accountResult.username || "";
        if (passwordEl) passwordEl.value = accountResult.password || "";
      } else {
        // Fallback: hi·ªÉn th·ªã accountName n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c username
        if (usernameEl) usernameEl.value = transaction.accountName || "";
        if (passwordEl) passwordEl.value = "";
      }
    } catch (accountErr) {
      console.error('üîê Error loading account info:', accountErr);
      // Fallback values
      const usernameEl = document.getElementById("currentUsername");
      const passwordEl = document.getElementById("currentPassword");
      if (usernameEl) usernameEl.value = transaction.accountName || "";
      if (passwordEl) passwordEl.value = "";
    }
    
    closeProcessingModal();
    modal.style.display = "block";
  } catch (err) {
    console.error('üç™ Error loading cookie:', err);
    closeProcessingModal();
    showResultModal("Kh√¥ng th·ªÉ t·∫£i cookie: " + err.message, false);
  }
}

export function copyCurrentCookie() {
  
  const val = document.getElementById("currentCookie").value;
  
  if (!val || val === "(Kh√¥ng c√≥ d·ªØ li·ªáu)") {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ cookie ƒë·ªÉ sao ch√©p!", false);
    return;
  }
  
  navigator.clipboard.writeText(val).then(() => {
    showResultModal("‚úÖ ƒê√£ sao ch√©p cookie th√†nh c√¥ng!", true);
  }).catch((err) => {
    console.error('‚ùå Copy failed:', err);
    showResultModal("‚ùå Kh√¥ng th·ªÉ sao ch√©p cookie!", false);
  });
}


export async function confirmUpdateCookie() {
  
  try {
    disableInteraction();
    const transaction = window.currentCookieTransaction;
    
    const newCookieEl = document.getElementById("newCookie");
    
    const newCookie = newCookieEl?.value.trim();

    if (!transaction || !transaction.transactionId) {
      console.error('‚ùå No transaction or transaction ID');
      enableInteraction();
      return;
    }
    
    // Ki·ªÉm tra cookie m·ªõi c√≥ r·ªóng kh√¥ng
    if (!newCookie) {
      enableInteraction();
      alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p cookie m·ªõi tr∆∞·ªõc khi c·∫≠p nh·∫≠t!");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }
    
    // Ki·ªÉm tra cookie c√≥ qu√° ng·∫Øn kh√¥ng (c√≥ th·ªÉ l√† l·ªói)
    if (newCookie.length < 10) {
      enableInteraction();
      alert("‚ö†Ô∏è Cookie c√≥ v·∫ª qu√° ng·∫Øn. Vui l√≤ng ki·ªÉm tra l·∫°i!");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }
    
    // Ki·ªÉm tra cookie c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát c·∫ßn thi·∫øt kh√¥ng
    if (!newCookie.includes('=')) {
      enableInteraction();
      alert("‚ö†Ô∏è Cookie c√≥ v·∫ª kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Cookie th∆∞·ªùng ch·ª©a d·∫•u '='.");
      return; // Kh√¥ng ƒë√≥ng modal, ƒë·ªÉ user s·ª≠a
    }

    
    const { BACKEND_URL } = getConstants();
    showProcessingModal("ƒêang c·∫≠p nh·∫≠t Cookie...");
    
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookieAndRename",
        transactionId: transaction.transactionId,
        accountSheetId: transaction.accountSheetId,
        newCookie: newCookie,
        softwareName: transaction.softwareName,
        softwarePackage: transaction.softwarePackage,
        accountName: transaction.accountName,
        type: "confirm"
      })
    });
    
    const result = await response.json();
    
    closeProcessingModal();
    
    if (result.status === "success") {
      showResultModal("‚úÖ C·∫≠p nh·∫≠t cookie th√†nh c√¥ng!\n\nCookie m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u cho giao d·ªãch " + transaction.transactionId, true);
      // Ch·ªâ ƒë√≥ng modal khi th√†nh c√¥ng
      enableInteraction();
      closeUpdateCookieModal();
    } else {
      showResultModal("‚ùå " + (result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cookie"), false);
      // Kh√¥ng ƒë√≥ng modal khi th·∫•t b·∫°i, ƒë·ªÉ user th·ª≠ l·∫°i
      enableInteraction();
    }
    
  } catch (err) {
    console.error('‚ùå Error in confirmUpdateCookie:', err);
    closeProcessingModal();
    showResultModal("‚ùå L·ªói khi c·∫≠p nh·∫≠t cookie: " + err.message, false);
    // Kh√¥ng ƒë√≥ng modal khi c√≥ l·ªói, ƒë·ªÉ user th·ª≠ l·∫°i
    enableInteraction();
  }
}

export async function cancelUpdateCookie() {
  
  try {
    disableInteraction();
    const transaction = window.currentCookieTransaction;
    
    if (!transaction?.transactionId) {
      enableInteraction();
      closeUpdateCookieModal();
      return;
    }

    const { BACKEND_URL } = getConstants();
    await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookie",
        transactionId: transaction.transactionId,
        type: "cancel"
      })
    });
    
  } catch (err) {
    console.warn("‚ùå Kh√¥ng th·ªÉ g·ª≠i log h·ªßy c·∫≠p nh·∫≠t cookie:", err.message);
  } finally {
    enableInteraction();
    closeUpdateCookieModal();
  }
}

export function closeUpdateCookieModal() {
  const modal = document.getElementById("updateCookieModal");
  if (modal) {
    modal.style.display = "none";
  } else {
    console.error('‚ùå Modal not found');
  }
}



function disableInteraction() {
  const overlay = document.getElementById("formOverlay");
  if (overlay) {
    overlay.style.display = "block";
  } else {
    console.error('‚ùå formOverlay not found');
  }
}

function enableInteraction() {
  const overlay = document.getElementById("formOverlay");
  if (overlay) {
    overlay.style.display = "none";
  } else {
    console.error('‚ùå formOverlay not found');
  }
}

export function copyUsername() {
  
  const val = document.getElementById("currentUsername").value;
  
  if (!val) {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ t√™n ƒëƒÉng nh·∫≠p ƒë·ªÉ sao ch√©p!", false);
    return;
  }
  
  navigator.clipboard.writeText(val).then(() => {
    showResultModal("‚úÖ ƒê√£ sao ch√©p t√™n ƒëƒÉng nh·∫≠p!", true);
  }).catch((err) => {
    console.error('‚ùå Copy failed:', err);
    showResultModal("‚ùå Kh√¥ng th·ªÉ sao ch√©p t√™n ƒëƒÉng nh·∫≠p!", false);
  });
}

export function copyPassword() {
  
  const val = document.getElementById("currentPassword").value;
  
  if (!val) {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ m·∫≠t kh·∫©u ƒë·ªÉ sao ch√©p!", false);
    return;
  }
  
  navigator.clipboard.writeText(val).then(() => {
    showResultModal("‚úÖ ƒê√£ sao ch√©p m·∫≠t kh·∫©u!", true);
  }).catch((err) => {
    console.error('‚ùå Copy failed:', err);
    showResultModal("‚ùå Kh√¥ng th·ªÉ sao ch√©p m·∫≠t kh·∫©u!", false);
  });
}
  