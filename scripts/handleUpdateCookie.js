import { getConstants } from './constants.js';
import { showResultModal } from './showResultModal.js';
import { showProcessingModal } from './showProcessingModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';

export async function handleUpdateCookie(index, transactionList) {
  console.log('üç™ handleUpdateCookie called with:', { index, transactionListLength: transactionList?.length });
  
  const transaction = transactionList?.[index];
  console.log('üç™ Found transaction:', transaction);
  
  if (!transaction) {
    console.error('‚ùå No transaction found at index:', index);
    return alert("Kh√¥ng t√¨m th·∫•y giao d·ªãch.");
  }

  const modal = document.getElementById("updateCookieModal");
  console.log('üç™ Modal found:', !!modal);
  const currentCookieEl = document.getElementById("currentCookie");
  const newCookieEl = document.getElementById("newCookie");

  currentCookieEl.value = "";
  newCookieEl.value = "";
  window.currentCookieTransaction = transaction;

  // L·∫•y cookie hi·ªán t·∫°i
  try {
    const { BACKEND_URL } = getConstants();
    showProcessingModal("ƒêang t·∫£i cookie...");
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "getCookie",
        accountSheetId: transaction.accountSheetId
      })
    });
    const result = await response.json();
    currentCookieEl.value = result.cookie || "(Kh√¥ng c√≥ d·ªØ li·ªáu)";
    closeProcessingModal();
    modal.style.display = "block";
  } catch (err) {
    closeProcessingModal();
    showResultModal("Kh√¥ng th·ªÉ t·∫£i cookie: " + err.message, false);
  }
}

export function copyCurrentCookie() {
  const val = document.getElementById("currentCookie").value;
  
  if (!val || val === "(Kh√¥ng c√≥ d·ªØ li·ªáu)") {
    showResultModal("‚ö†Ô∏è Kh√¥ng c√≥ cookie ƒë·ªÉ sao ch√©p!", false);
    return;
  }
  
  navigator.clipboard.writeText(val).then(() => {
    showResultModal("‚úÖ ƒê√£ sao ch√©p cookie th√†nh c√¥ng!", true);
  }).catch(() => {
    showResultModal("‚ùå Kh√¥ng th·ªÉ sao ch√©p cookie!", false);
  });
}

export async function confirmUpdateCookie() {
disableInteraction();
  const transaction = window.currentCookieTransaction;
  const newCookie = document.getElementById("newCookie").value.trim();

  if (!transaction || !transaction.transactionId) {
    enableInteraction();
    return;
  }
  
  // Ki·ªÉm tra cookie m·ªõi c√≥ r·ªóng kh√¥ng
  if (!newCookie) {
    enableInteraction();
    showResultModal("‚ö†Ô∏è Vui l√≤ng nh·∫≠p cookie m·ªõi tr∆∞·ªõc khi c·∫≠p nh·∫≠t!", false);
    return;
  }
  
  // Ki·ªÉm tra cookie c√≥ qu√° ng·∫Øn kh√¥ng (c√≥ th·ªÉ l√† l·ªói)
  if (newCookie.length < 10) {
    enableInteraction();
    showResultModal("‚ö†Ô∏è Cookie c√≥ v·∫ª qu√° ng·∫Øn. Vui l√≤ng ki·ªÉm tra l·∫°i!", false);
    return;
  }
  
  // Ki·ªÉm tra cookie c√≥ ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát c·∫ßn thi·∫øt kh√¥ng
  if (!newCookie.includes('=')) {
    enableInteraction();
    showResultModal("‚ö†Ô∏è Cookie c√≥ v·∫ª kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng. Cookie th∆∞·ªùng ch·ª©a d·∫•u '='.", false);
    return;
  }

  const { BACKEND_URL } = getConstants();
  try {
    showProcessingModal("ƒêang c·∫≠p nh·∫≠t Cookie...");
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookie",
        transactionId: transaction.transactionId,
        accountSheetId: transaction.accountSheetId,
        newCookie: newCookie,
        type: "confirm"
      })
    });
    const result = await response.json();
    closeProcessingModal();
    if (result.status === "success") {
      showResultModal("‚úÖ C·∫≠p nh·∫≠t cookie th√†nh c√¥ng!\n\nCookie m·ªõi ƒë√£ ƒë∆∞·ª£c l∆∞u cho giao d·ªãch " + transaction.transactionId, true);
    } else {
      showResultModal("‚ùå " + (result.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t cookie"), false);
    }
  } catch (err) {
    closeProcessingModal();
    showResultModal("L·ªói khi c·∫≠p nh·∫≠t cookie: " + err.message, false);
  } finally {
    enableInteraction();
    closeUpdateCookieModal();
  }
}

export async function cancelUpdateCookie() {
    disableInteraction();
  const transaction = window.currentCookieTransaction;
  if (!transaction?.transactionId) return;

  const { BACKEND_URL } = getConstants();
  try {
    await fetch(BACKEND_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        action: "updateCookie",
        transactionId: transaction.transactionId,
        type: "cancel"
      })
    });
  } catch (err) {
    console.warn("Kh√¥ng th·ªÉ g·ª≠i log h·ªßy c·∫≠p nh·∫≠t cookie:", err.message);
  } finally {
    enableInteraction();
    closeUpdateCookieModal();
  }
}

export function closeUpdateCookieModal() {
  document.getElementById("updateCookieModal").style.display = "none";
}

function disableInteraction() {
    document.getElementById("formOverlay").style.display = "block";
  }
  function enableInteraction() {
    document.getElementById("formOverlay").style.display = "none";
  }
  