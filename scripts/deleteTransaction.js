import { validateBeforeOperation } from './core/sessionValidator.js';
import { cacheManager } from './core/cacheManager.js';
import { uiBlocker } from './uiBlocker.js';

export async function deleteTransaction(
  index,
  transactionList,
  userInfo,
  loadTransactions,
  handleReset,
  showProcessingModal,
  showResultModal,
  openConfirmModal,
  getConstants
) {
  console.log("üóëÔ∏è deleteTransaction ƒë∆∞·ª£c g·ªçi v·ªõi:", {
    index,
    transactionListType: typeof transactionList,
    transactionListLength: transactionList ? transactionList.length : 0,
    hasUserInfo: !!userInfo
  });

  // Validation c∆° b·∫£n tr∆∞·ªõc
  if (!transactionList || !Array.isArray(transactionList)) {
    console.error("‚ùå TransactionList kh√¥ng h·ª£p l·ªá:", transactionList);
    if (showResultModal) {
      showResultModal("D·ªØ li·ªáu giao d·ªãch kh√¥ng h·ª£p l·ªá. Vui l√≤ng t·∫£i l·∫°i trang.", false);
    }
    return;
  }

  if (typeof index !== 'number' || index < 0) {
    console.error("‚ùå Index kh√¥ng h·ª£p l·ªá:", index);
    if (showResultModal) {
      showResultModal("Ch·ªâ s·ªë giao d·ªãch kh√¥ng h·ª£p l·ªá.", false);
    }
    return;
  }

  const transaction = transactionList[index];

  if (!transaction) {
    console.error("‚ùå Giao d·ªãch kh√¥ng t·ªìn t·∫°i t·∫°i index:", index, "trong danh s√°ch c√≥", transactionList.length, "items");
    if (showResultModal) {
      showResultModal("Giao d·ªãch kh√¥ng t·ªìn t·∫°i. Vui l√≤ng th·ª≠ l·∫°i.", false);
    }
    return;
  }

  console.log("‚úÖ Transaction found:", transaction.transactionId);

  const confirmMessage = `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch ${transaction.transactionId}? ${
    transaction.accountSheetId && transaction.customerEmail
      ? `Giao d·ªãch n√†y s·∫Ω ƒë∆∞·ª£c x√≥a v√† quy·ªÅn chia s·∫ª t·ªáp v·ªõi email ${transaction.customerEmail} s·∫Ω b·ªã h·ªßy.`
      : ""
  }`;

  // Hi·ªÉn th·ªã confirm modal ngay l·∫≠p t·ª©c
  const confirmDelete = await new Promise((resolve) => {
    openConfirmModal(confirmMessage, resolve);
  });

  if (!confirmDelete) {
    console.log("Ng∆∞·ªùi d√πng h·ªßy x√≥a giao d·ªãch");
    return;
  }

  // Kh√≥a UI ngay sau khi user confirm
  uiBlocker.block();

  // Validate session sau khi confirm
  const sessionValid = await validateBeforeOperation();
  if (!sessionValid) {
    uiBlocker.unblock();
    return;
  }

  const { BACKEND_URL } = getConstants();

  const data = {
    action: "deleteTransaction",
    transactionId: transaction.transactionId,
    maNhanVien: userInfo.maNhanVien,
    duocXoaGiaoDichCuaAi: userInfo.duocXoaGiaoDichCuaAi || "ch·ªâ b·∫£n th√¢n"
  };

  console.log("üì§ D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(data, null, 2));

  try {
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();
    console.log("K·∫øt qu·∫£ t·ª´ server:", result);

    if (result.status === "success") {
      // X√≥a giao d·ªãch kh·ªèi UI ngay l·∫≠p t·ª©c
      if (window.transactionList) {
        window.transactionList.splice(index, 1);
        
        // Update table ngay l·∫≠p t·ª©c v·ªõi danh s√°ch m·ªõi
        if (window.updateTable && typeof window.updateTable === 'function') {
          const { updateTable } = await import('./updateTable.js');
          const { formatDate } = await import('./formatDate.js');
          const { editTransaction } = await import('./editTransaction.js');
          const { viewTransaction } = await import('./viewTransaction.js');
          
          updateTable(window.transactionList, window.currentPage || 1, window.itemsPerPage || 10,
                     formatDate, editTransaction, window.deleteTransaction, viewTransaction);
        }
      }

      // Clear cache ƒë·ªÉ ƒë·∫£m b·∫£o sync v·ªõi server
      cacheManager.clearTransactionCaches();
      
      // Hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
      showResultModal(
        transaction.accountSheetId && transaction.customerEmail
          ? "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a v√† quy·ªÅn chia s·∫ª ƒë√£ ƒë∆∞·ª£c h·ªßy!"
          : "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a!",
        true
      );
      
      // Load l·∫°i data t·ª´ server trong background
      window.loadTransactions();
      handleReset();
    } else {
      console.error("L·ªói t·ª´ server:", result.message);
      showResultModal(result.message || "Kh√¥ng th·ªÉ x√≥a giao d·ªãch!", false);
    }
  } catch (err) {
    console.error("L·ªói trong deleteTransaction:", err);
    showResultModal(`L·ªói k·∫øt n·ªëi server: ${err.message}`, false);
  } finally {
    // Lu√¥n m·ªü kh√≥a UI khi k·∫øt th√∫c
    uiBlocker.unblock();
  }
}
