import { validateBeforeOperation } from './core/sessionValidator.js';
import { cacheManager } from './core/cacheManager.js';

export async function deleteTransaction(
  index,
  transactionList,
  userInfo,
  loadTransactions,
  handleReset,
  showProcessingModal,
  showResultModal,
  openConfirmModal,
  getConstants
) {
  console.log("üóëÔ∏è deleteTransaction ƒë∆∞·ª£c g·ªçi v·ªõi:", {
    index,
    transactionListType: typeof transactionList,
    transactionListLength: transactionList ? transactionList.length : 0,
    hasUserInfo: !!userInfo
  });
  
  // Validate session before deleting transaction
  const sessionValid = await validateBeforeOperation();
  if (!sessionValid) {
    return;
  }

  // Additional validation
  if (!transactionList || !Array.isArray(transactionList)) {
    console.error("‚ùå TransactionList kh√¥ng h·ª£p l·ªá:", transactionList);
    if (showResultModal) {
      showResultModal("D·ªØ li·ªáu giao d·ªãch kh√¥ng h·ª£p l·ªá. Vui l√≤ng t·∫£i l·∫°i trang.", false);
    }
    return;
  }

  if (typeof index !== 'number' || index < 0) {
    console.error("‚ùå Index kh√¥ng h·ª£p l·ªá:", index);
    if (showResultModal) {
      showResultModal("Ch·ªâ s·ªë giao d·ªãch kh√¥ng h·ª£p l·ªá.", false);
    }
    return;
  }

  const transaction = transactionList[index];

  if (!transaction) {
    console.error("‚ùå Giao d·ªãch kh√¥ng t·ªìn t·∫°i t·∫°i index:", index, "trong danh s√°ch c√≥", transactionList.length, "items");
    if (showResultModal) {
      showResultModal("Giao d·ªãch kh√¥ng t·ªìn t·∫°i. Vui l√≤ng th·ª≠ l·∫°i.", false);
    }
    return;
  }

  console.log("‚úÖ Transaction found:", transaction.transactionId);

  const confirmMessage = `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a giao d·ªãch ${transaction.transactionId}? ${
    transaction.accountSheetId && transaction.customerEmail
      ? `Giao d·ªãch n√†y s·∫Ω ƒë∆∞·ª£c x√≥a v√† quy·ªÅn chia s·∫ª t·ªáp v·ªõi email ${transaction.customerEmail} s·∫Ω b·ªã h·ªßy.`
      : ""
  }`;

  const confirmDelete = await new Promise((resolve) => {
    openConfirmModal(confirmMessage, resolve);
  });

  if (!confirmDelete) {
    console.log("Ng∆∞·ªùi d√πng h·ªßy x√≥a giao d·ªãch");
    return;
  }

  showProcessingModal("ƒêang x√≥a giao d·ªãch...");

  const { BACKEND_URL } = getConstants();

  const data = {
    action: "deleteTransaction",
    transactionId: transaction.transactionId,
    maNhanVien: userInfo.maNhanVien,
    duocXoaGiaoDichCuaAi: userInfo.duocXoaGiaoDichCuaAi || "ch·ªâ b·∫£n th√¢n"
  };

  console.log("üì§ D·ªØ li·ªáu g·ª≠i ƒëi:", JSON.stringify(data, null, 2));

  try {
    const response = await fetch(BACKEND_URL, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(data)
    });

    const result = await response.json();
    console.log("K·∫øt qu·∫£ t·ª´ server:", result);

    if (result.status === "success") {
      showResultModal(
        transaction.accountSheetId && transaction.customerEmail
          ? "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a v√† quy·ªÅn chia s·∫ª ƒë√£ ƒë∆∞·ª£c h·ªßy!"
          : "Giao d·ªãch ƒë√£ ƒë∆∞·ª£c x√≥a!",
        true
      );

      // Clear cache ƒë·ªÉ ƒë·∫£m b·∫£o load data m·ªõi
      cacheManager.clearTransactionCaches();
      
      await window.loadTransactions();
      handleReset();
    } else {
      console.error("L·ªói t·ª´ server:", result.message);
      showResultModal(result.message || "Kh√¥ng th·ªÉ x√≥a giao d·ªãch!", false);
    }
  } catch (err) {
    console.error("L·ªói trong deleteTransaction:", err);
    showResultModal(`L·ªói k·∫øt n·ªëi server: ${err.message}`, false);
  }
}
