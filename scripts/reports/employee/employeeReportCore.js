// Employee Report Core Module
// X·ª≠ l√Ω d·ªØ li·ªáu v√† ph√¢n t√≠ch hi·ªáu su·∫•t nh√¢n vi√™n t·ª´ GiaoDich v√† ChiPhi
            kpis: {},
        };
    }

    // Kh·ªüi t·∫°o module
    async initialize() {
        if (this.isInitialized) return;
        
        try {
            
            this.setupEventListeners();
            await this.loadAllData();
            this.processEmployeeData();
            this.renderKPIDashboard();
            this.renderOverviewCards();
            this.renderAnalyticsCharts();
            this.renderEmployeePerformanceTable();
            this.renderDetailsSection();
            this.renderGoalsSection();
            this.renderRankingSection();
            
            this.isInitialized = true;
  } catch (error) {
            console.error('‚ùå Error initializing Employee Report:', error);
        }
    }

    // T·∫£i t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c√°c sheet
    async loadAllData() {
        try {
            // L·∫•y d·ªØ li·ªáu t·ª´ c√°c sheet hi·ªán c√≥
            this.transactions = this.extractTransactionData();
            this.expenses = this.extractExpenseData();
  } catch (error) {
            console.error('‚ùå Error loading employee data:', error);
            // Fallback to mock data if real data is not available
                };
            }
            
            // If data is in array format
                maGiaoDich: row[0] || '',           // A: M√£ giao d·ªãch
                ngayGiaoDich: row[1] || '',         // B: Ng√†y giao d·ªãch
                loaiGiaoDich: row[2] || '',         // C: Lo·∫°i giao d·ªãch
                tenKhachHang: row[3] || '',         // D: T√™n kh√°ch h√†ng
                email: row[4] || '',                // E: Email
                lienHe: row[5] || '',               // F: Li√™n h·ªá
                soThangDangKy: parseInt(row[6]) || 0, // G: S·ªë th√°ng ƒëƒÉng k√Ω
                ngayBatDau: row[7] || '',           // H: Ng√†y b·∫Øt ƒë·∫ßu
                ngayKetThuc: row[8] || '',          // I: Ng√†y k·∫øt th√∫c
                soThietBi: parseInt(row[9]) || 0,   // J: S·ªë thi·∫øt b·ªã
                tenPhanMem: row[10] || '',          // K: T√™n ph·∫ßn m·ªÅm
                goiPhanMem: row[11] || '',          // L: G√≥i ph·∫ßn m·ªÅm
                tenTaiKhoan: row[12] || '',         // M: T√™n t√†i kho·∫£n
                idSheetTaiKhoan: row[13] || '',     // N: ID Sheet T√†i kho·∫£n
                capNhatCookie: row[14] || '',       // O: C·∫≠p nh·∫≠t Cookie
                thongTinDonHang: row[15] || '',     // P: Th√¥ng tin ƒë∆°n h√†ng
                doanhThu: parseFloat(row[16]) || 0, // Q: Doanh thu
                hoaHong: parseFloat(row[17]) || 0,  // R: Hoa h·ªìng
                ghiChu: row[18] || '',              // S: Ghi ch√∫
                tenChuan: row[19] || '',            // T: T√™n chu·∫©n
                tenNhanVien: row[20] || '',         // U: T√™n nh√¢n vi√™n
            };
        });
    }

    // Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ sheet ChiPhi
                };
            }
            
            // If data is in array format
                maChiPhi: row[0] || '',             // A: M√£ chi ph√≠
                ngayChi: row[1] || '',              // B: Ng√†y chi
                loaiKeToan: row[2] || '',           // C: Lo·∫°i k·∫ø to√°n
                phanBo: row[3] || '',               // D: Ph√¢n b·ªï
                loaiKhoanChi: row[4] || '',         // E: Lo·∫°i kho·∫£n chi
                danhMucChung: row[5] || '',         // F: Danh m·ª•c chung
                tenSanPham: row[6] || '',           // G: T√™n s·∫£n ph·∫©m/D·ªãch v·ª•
                phienBan: row[7] || '',             // H: Phi√™n b·∫£n/G√≥i d·ªãch v·ª•
                soTien: parseFloat(row[8]) || 0,    // I: S·ªë ti·ªÅn
                donViTienTe: row[9] || '',          // J: ƒê∆°n v·ªã ti·ªÅn t·ªá
                nganHang: row[10] || '',            // K: Ng√¢n h√†ng/V√≠
                thongTinThe: row[11] || '',         // L: Th√¥ng tin th·∫ª/T√†i kho·∫£n
                phuongThucChi: row[12] || '',       // M: Ph∆∞∆°ng th·ª©c chi
                ngayTaiTuc: row[13] || '',          // N: Ng√†y t√°i t·ª•c
                nguoiNhan: row[14] || '',           // O: Ng∆∞·ªùi nh·∫≠n ho·∫∑c nh√† cung c·∫•p
                trangThai: row[15] || '',           // P: Tr·∫°ng th√°i
                ghiChu: row[16] || '',              // Q: Ghi ch√∫
                tenChuan: row[17] || '',            // R: T√™n chu·∫©n
                tenNhanVien: row[18] || '',         // S: T√™n nh√¢n vi√™n
            };
        });
    }

    // Method m·ªõi ƒë·ªÉ x·ª≠ l√Ω t·∫•t c·∫£ d·ªØ li·ªáu s·ª≠ d·ª•ng EmployeeDataProcessor
  });
                    monthlyRevenue: {},
                    monthlyTransactions: {},
            }
            
            const employee = employeeMap.get(employeeKey);
            employee.totalRevenue += transaction.doanhThu || 0;
            employee.totalCommission += transaction.hoaHong || 0;
            employee.transactionCount++;
            employee.transactions.push(transaction);
            
            // C·∫≠p nh·∫≠t ho·∫°t ƒë·ªông cu·ªëi
            const transactionDate = new Date(transaction.ngayGiaoDich);
            if (!employee.lastActivity || transactionDate > new Date(employee.lastActivity)) {
                employee.lastActivity = transaction.ngayGiaoDich;
            }
            
            // C·∫≠p nh·∫≠t d·ªØ li·ªáu theo th√°ng
            const monthKey = transaction.ngayGiaoDich ? transaction.ngayGiaoDich.substring(0, 7) : new Date().toISOString().substring(0, 7);
            // T√≠nh hi·ªáu su·∫•t (so v·ªõi target ho·∫∑c trung b√¨nh)
            // X√°c ƒë·ªãnh level hi·ªáu su·∫•t
            employee.performanceLevel = this.getPerformanceLevel(employee.performanceRatio);
        });

        // S·∫Øp x·∫øp v√† x·∫øp h·∫°ng
        this.employees = Array.from(employeeMap.values())
            .sort((a, b) => b.totalRevenue - a.totalRevenue);
        
        // G√°n rank
        this.employees.forEach((employee, index) => {
            employee.rank = index + 1;
        });
        
        this.filteredEmployees = [...this.employees];
        
    }

    // T·∫°o d·ªØ li·ªáu m·∫´u n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu th·ª±c
    generateMockData() {
        
        const mockEmployees = [
            { name: 'Nguy·ªÖn VƒÉn An', code: 'NV001', dept: 'sales' },
            { name: 'Tr·∫ßn Th·ªã B√¨nh', code: 'NV002', dept: 'sales' },
            { name: 'L√™ VƒÉn C∆∞·ªùng', code: 'NV003', dept: 'support' },
            { name: 'Ph·∫°m Th·ªã Dung', code: 'NV004', dept: 'marketing' },
            { name: 'Ho√†ng VƒÉn Em', code: 'NV005', dept: 'sales' },
            { name: 'V√µ Th·ªã Ph∆∞·ª£ng', code: 'NV006', dept: 'support' },
            { name: 'ƒê·∫∑ng VƒÉn Giang', code: 'NV007', dept: 'admin' },
            { name: 'B√πi Th·ªã Hoa', code: 'NV008', dept: 'sales' }
        ];
        }));

        // T√≠nh to√°n v√† c·∫≠p nh·∫≠t c√°c ch·ªâ s·ªë
        const topPerformers = this.employees.filter(emp => emp.performanceRatio >= 100).length;
        const activeEmployees = this.employees.filter(emp => {
            if (!emp.lastActivity) return false;
            const daysSinceActivity = Math.floor((new Date() - new Date(emp.lastActivity)) / (1000 * 60 * 60 * 24));
            return daysSinceActivity <= 30;
        }).length;

        container.innerHTML = `
            <div class="kpi-grid">
                <div class="kpi-card employees">
                    <div class="kpi-icon">üë•</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${totalEmployees}</div>
                        <div class="kpi-label">T·ªïng nh√¢n vi√™n</div>
                        <div class="kpi-trend positive">${activeEmployees} ho·∫°t ƒë·ªông th√°ng n√†y</div>
                    </div>
                </div>

                <div class="kpi-card revenue">
                    <div class="kpi-icon">üí∞</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${formatCurrency(totalRevenue)}</div>
                        <div class="kpi-label">T·ªïng doanh thu</div>
                        <div class="kpi-trend positive">+${((totalRevenue / (totalRevenue + totalCommission)) * 100).toFixed(1)}% hi·ªáu qu·∫£</div>
                    </div>
                </div>

                <div class="kpi-card commission">
                    <div class="kpi-icon">üíµ</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${formatCurrency(totalCommission)}</div>
                        <div class="kpi-label">T·ªïng hoa h·ªìng</div>
                        <div class="kpi-trend neutral">${((totalCommission / totalRevenue) * 100).toFixed(1)}% t·ª∑ l·ªá</div>
                    </div>
                </div>

                <div class="kpi-card performance">
                    <div class="kpi-icon">üìà</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${avgPerformance.toFixed(1)}%</div>
                        <div class="kpi-label">Hi·ªáu su·∫•t TB</div>
                        <div class="kpi-trend ${avgPerformance >= 100 ? 'positive' : 'negative'}">
                        </div>
                    </div>
                </div>

                <div class="kpi-card top-performers">
                    <div class="kpi-icon">üèÜ</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${topPerformers}</div>
                        <div class="kpi-label">Top performers</div>
                        <div class="kpi-trend positive">‚â•100% KPI</div>
                    </div>
                </div>

                <div class="kpi-card efficiency">
                    <div class="kpi-icon">‚ö°</div>
                    <div class="kpi-content">
                        <div class="kpi-value">${formatCurrency(totalRevenue / totalEmployees)}</div>
                        <div class="kpi-label">Doanh thu/NV</div>
                        <div class="kpi-trend neutral">Trung b√¨nh</div>
                    </div>
                </div>
            </div>
        `;
    }

    // Render Overview Cards
  });
                };
            }
            departmentStats[dept].count++;
            departmentStats[dept].revenue += emp.totalRevenue;
            departmentStats[dept].commission += emp.totalCommission;
            departmentStats[dept].avgPerformance += emp.performanceRatio;
        });

        // T√≠nh trung b√¨nh
        Object.keys(departmentStats).forEach(dept => {
            departmentStats[dept].avgPerformance /= departmentStats[dept].count;
        });

        const topDepartments = Object.entries(departmentStats)
            .sort((a, b) => b[1].revenue - a[1].revenue)
            .slice(0, 3);

        container.innerHTML = `
            <div class="overview-card">
                <h4>üè¢ Top ph√≤ng ban theo doanh thu</h4>
                <div class="top-list">
                    ${topDepartments.map(([dept, stats], index) => `
                        <div class="top-item">
                            <span class="rank">#${index + 1}</span>
                            <span class="name">${this.getDepartmentName(dept)}</span>
                            <span class="value">${formatCurrency(stats.revenue)}</span>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="overview-card">
                <h4>üìä Ph√¢n b·ªï hi·ªáu su·∫•t</h4>
                <div class="performance-breakdown">
                    ${Object.entries(departmentStats).map(([dept, stats]) => `
                        <div class="performance-item">
                            <div class="performance-info">
                                <span class="dept-name">${this.getDepartmentName(dept)}</span>
                                <span class="performance-value">${stats.avgPerformance.toFixed(1)}%</span>
                            </div>
                            <div class="performance-bar">
                                <div class="performance-fill" style="width: ${Math.min(stats.avgPerformance, 150)}%"></div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            </div>

            <div class="overview-card">
                <h4>‚≠ê Ph√¢n lo·∫°i hi·ªáu su·∫•t</h4>
                <div class="performance-summary">
                    <div class="performance-group excellent">
                        <span class="performance-count">${this.employees.filter(emp => emp.performanceLevel === 'excellent').length}</span>
                        <span class="performance-label">Xu·∫•t s·∫Øc (‚â•120%)</span>
                    </div>
                    <div class="performance-group good">
                        <span class="performance-count">${this.employees.filter(emp => emp.performanceLevel === 'good').length}</span>
                        <span class="performance-label">T·ªët (100-120%)</span>
                    </div>
                    <div class="performance-group average">
                        <span class="performance-count">${this.employees.filter(emp => emp.performanceLevel === 'average').length}</span>
                        <span class="performance-label">Trung b√¨nh (80-100%)</span>
                    </div>
                    <div class="performance-group below">
                        <span class="performance-count">${this.employees.filter(emp => emp.performanceLevel === 'below').length}</span>
                        <span class="performance-label">C·∫ßn c·∫£i thi·ªán (<80%)</span>
                    </div>
                </div>
            </div>
        `;
    }
            'support': 'H·ªó tr·ª£',
            'marketing': 'Marketing',
            'admin': 'Qu·∫£n tr·ªã'
        };
                        '#4f46e5', '#06b6d4', '#10b981', '#f59e0b', '#ef4444',
                        '#8b5cf6', '#ec4899', '#14b8a6', '#f97316', '#6366f1'
                    ],
  });
                }]
            },
                    legend: { display: false },
                        }
                    }
                },
                        }
                    },
                        }
                    }
                }
            }
        });
    }
                    {
                    },
                    {
                    }
                ]
            },
                },
                        }
                    }
                },
                        }
                    },
                        }
                    },
  });

                        },
                        }
                    }
                }
            }
        });
    }

    renderPerformanceTrendChart() {
        const ctx = document.getElementById('performanceTrendChart');
        if (!ctx) return;

        // T·∫°o d·ªØ li·ªáu xu h∆∞·ªõng hi·ªáu su·∫•t 6 th√°ng g·∫ßn nh·∫•t
        const months = [];
        const avgPerformanceData = [];
        const topPerformerCountData = [];
        
        for (let i = 5; i >= 0; i--) {
            const date = new Date();
            date.setMonth(date.getMonth() - i);
            const monthKey = date.toLocaleDateString('vi-VN', { month: 'short', year: '2-digit' });
                    {
                        backgroundColor: 'rgba(79, 70, 229, 0.1)',
  });
                    },
                    {
                    }
                ]
            },
                                if (context.datasetIndex === 0) {
                                    return `Hi·ªáu su·∫•t TB: ${context.parsed.y.toFixed(1)}%`;
                                } else {
                                    return `Top performers: ${context.parsed.y} ng∆∞·ªùi`;
                                }
                            }
                        }
                    }
                },
                        }
                    },
                        },
                        }
                    }
                }
            }
        });
    }
            'T·ªët (100-119%)': this.employees.filter(emp => emp.performanceRatio >= 100 && emp.performanceRatio < 120).length,
            'Trung b√¨nh (80-99%)': this.employees.filter(emp => emp.performanceRatio >= 80 && emp.performanceRatio < 100).length,
            'C·∫ßn c·∫£i thi·ªán (<80%)': this.employees.filter(emp => emp.performanceRatio < 80).length
        };
                    backgroundColor: ['#10b981', '#f59e0b', '#6b7280', '#ef4444'],
  });
                }]
            },
                    },
                                const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                const percentage = ((context.parsed / total) * 100).toFixed(1);
                                return `${context.label}: ${context.parsed} ng∆∞·ªùi (${percentage}%)`;
                            }
                        }
                    }
                }
            }
        });
    }

    // Render Employee Performance Table
    renderEmployeePerformanceTable() {
        const tableBody = document.querySelector('#employeePerformanceTableBody');
        if (!tableBody) return;

        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = startIndex + this.itemsPerPage;
        const paginatedData = this.filteredEmployees.slice(startIndex, endIndex);

        tableBody.innerHTML = paginatedData.map(employee => `
            <tr class="table-row ${employee.performanceLevel}">
                <td>
                    <div class="employee-info">
                        <strong class="employee-name">${employee.tenNhanVien}</strong>
                        <span class="employee-department">${this.getDepartmentName(employee.department)}</span>
                    </div>
                </td>
                <td>
                    <span class="employee-code">${employee.maNhanVien}</span>
                </td>
                <td class="revenue-cell">${formatCurrency(employee.totalRevenue)}</td>
                <td class="commission-cell">${formatCurrency(employee.totalCommission)}</td>
                <td class="transaction-count">${employee.transactionCount}</td>
                <td class="avg-transaction">${formatCurrency(employee.avgTransactionValue)}</td>
                <td>
                    <div class="performance-display">
                        <div class="performance-bar">
                            <div class="performance-fill ${employee.performanceLevel}" style="width: ${Math.min(employee.performanceRatio, 150)}%"></div>
                        </div>
                        <span class="performance-text">${employee.performanceRatio.toFixed(1)}%</span>
                    </div>
                </td>
                <td>
                    <span class="last-activity">${employee.lastActivity ? formatDate(employee.lastActivity) : 'N/A'}</span>
                </td>
                <td>
                    <div class="action-buttons">
                        <button class="action-btn view" onclick="employeeReport.viewEmployee('${employee.maNhanVien}')" title="Xem chi ti·∫øt">
                            üëÅÔ∏è
                        </button>
                        <button class="action-btn edit" onclick="employeeReport.editEmployee('${employee.maNhanVien}')" title="Ch·ªânh s·ª≠a">
                            ‚úèÔ∏è
                        </button>
                        <button class="action-btn kpi" onclick="employeeReport.setKPI('${employee.maNhanVien}')" title="Thi·∫øt l·∫≠p KPI">
                            üéØ
                        </button>
                    </div>
                </td>
            </tr>
        `).join('');
  });
                };
            }
            deptStats[dept].count++;
            deptStats[dept].totalRevenue += emp.totalRevenue;
            deptStats[dept].totalCommission += emp.totalCommission;
            deptStats[dept].avgPerformance += emp.performanceRatio;
            deptStats[dept].employees.push(emp);
        });

        // T√≠nh trung b√¨nh
        Object.keys(deptStats).forEach(dept => {
            deptStats[dept].avgPerformance /= deptStats[dept].count;
        });

        container.innerHTML = `
            <div class="department-stats">
                ${Object.entries(deptStats).map(([dept, stats]) => `
                    <div class="dept-item">
                        <div class="dept-header">
                            <span class="dept-name">${this.getDepartmentName(dept)}</span>
                            <span class="dept-count">${stats.count} NV</span>
                        </div>
                        <div class="dept-metrics">
                            <div class="metric">
                                <span class="metric-label">Doanh thu:</span>
                                <span class="metric-value">${formatCurrency(stats.totalRevenue)}</span>
                            </div>
                            <div class="metric">
                                <span class="metric-label">Hi·ªáu su·∫•t TB:</span>
                                <span class="metric-value ${stats.avgPerformance >= 100 ? 'positive' : 'negative'}">${stats.avgPerformance.toFixed(1)}%</span>
                            </div>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderCommissionAnalysis() {
        const container = document.querySelector('#commissionAnalysisContent');
        if (!container) return;

        const totalCommission = this.employees.reduce((sum, emp) => sum + emp.totalCommission, 0);
        const totalRevenue = this.employees.reduce((sum, emp) => sum + emp.totalRevenue, 0);
        const avgCommissionRate = (totalCommission / totalRevenue) * 100;
        const topCommissionEarners = [...this.employees]
            .sort((a, b) => b.totalCommission - a.totalCommission)
            .slice(0, 3);

        container.innerHTML = `
            <div class="commission-summary">
                <div class="summary-item">
                    <span class="summary-label">T·ªïng hoa h·ªìng:</span>
                    <span class="summary-value">${formatCurrency(totalCommission)}</span>
                </div>
                <div class="summary-item">
                    <span class="summary-label">T·ª∑ l·ªá hoa h·ªìng TB:</span>
                    <span class="summary-value">${avgCommissionRate.toFixed(2)}%</span>
                </div>
            </div>
            <div class="top-commission">
                <h5>Top 3 hoa h·ªìng cao nh·∫•t:</h5>
                ${topCommissionEarners.map((emp, index) => `
                    <div class="commission-item">
                        <span class="rank">#${index + 1}</span>
                        <span class="name">${emp.tenNhanVien}</span>
                        <span class="value">${formatCurrency(emp.totalCommission)}</span>
                    </div>
                `).join('')}
            </div>
        `;
    }

    renderActivityTracking() {
        const container = document.querySelector('#activityTrackingContent');
        if (!container) return;

        const now = new Date();
        const activeToday = this.employees.filter(emp => {
            if (!emp.lastActivity) return false;
            const daysDiff = Math.floor((now - new Date(emp.lastActivity)) / (1000 * 60 * 60 * 24));
            return daysDiff === 0;
        }).length;

        const activeThisWeek = this.employees.filter(emp => {
            if (!emp.lastActivity) return false;
            const daysDiff = Math.floor((now - new Date(emp.lastActivity)) / (1000 * 60 * 60 * 24));
            return daysDiff <= 7;
        }).length;

        const inactiveEmployees = this.employees.filter(emp => {
            if (!emp.lastActivity) return true;
            const daysDiff = Math.floor((now - new Date(emp.lastActivity)) / (1000 * 60 * 60 * 24));
            return daysDiff > 30;
        });

        container.innerHTML = `
            <div class="activity-summary">
                <div class="activity-item">
                    <span class="activity-label">Ho·∫°t ƒë·ªông h√¥m nay:</span>
                    <span class="activity-value">${activeToday} NV</span>
                </div>
                <div class="activity-item">
                    <span class="activity-label">Ho·∫°t ƒë·ªông tu·∫ßn n√†y:</span>
                    <span class="activity-value">${activeThisWeek} NV</span>
                </div>
                <div class="activity-item">
                    <span class="activity-label">Kh√¥ng ho·∫°t ƒë·ªông (>30 ng√†y):</span>
                    <span class="activity-value warning">${inactiveEmployees.length} NV</span>
                </div>
            </div>
            ${inactiveEmployees.length > 0 ? `
                <div class="inactive-employees">
                    <h5>Nh√¢n vi√™n c·∫ßn quan t√¢m:</h5>
                    ${inactiveEmployees.slice(0, 5).map(emp => `
                        <div class="inactive-item">
                            <span class="inactive-name">${emp.tenNhanVien}</span>
                            <span class="inactive-date">${emp.lastActivity ? formatDate(emp.lastActivity) : 'Ch∆∞a r√µ'}</span>
                        </div>
                    `).join('')}
                </div>
            ` : ''}
        `;
    }

    // Render Goals Section
    renderGoalsSection() {
        const container = document.querySelector('#employeeGoalsContent');
        if (!container) return;

        container.innerHTML = `
            <div class="goals-overview">
                <div class="goals-stats">
                    <div class="goal-stat">
                        <span class="stat-value">${this.employees.filter(emp => emp.performanceRatio >= 100).length}</span>
                        <span class="stat-label">ƒê·∫°t m·ª•c ti√™u</span>
                    </div>
                    <div class="goal-stat">
                        <span class="stat-value">${this.employees.filter(emp => emp.performanceRatio < 100).length}</span>
                        <span class="stat-label">Ch∆∞a ƒë·∫°t</span>
                    </div>
                    <div class="goal-stat">
                        <span class="stat-value">${this.kpiTargets.size}</span>
                        <span class="stat-label">C√≥ KPI</span>
                    </div>
                </div>
                <div class="goals-actions">
                    <button class="goals-btn" onclick="employeeReport.openKPIModal()">
                        üéØ Thi·∫øt l·∫≠p KPI m·ªõi
                    </button>
                    <button class="goals-btn secondary" onclick="employeeReport.reviewGoals()">
                        üìã Xem l·∫°i m·ª•c ti√™u
                    </button>
                </div>
            </div>
        `;
    }

    // Render Ranking Section
    renderRankingSection() {
        const container = document.querySelector('#employeeRankingContent');
        if (!container) return;

        const topRanked = this.employees.slice(0, 10);

        container.innerHTML = `
            <div class="ranking-list">
                ${topRanked.map((emp, index) => `
                    <div class="ranking-item ${index < 3 ? 'podium' : ''}">
                        <div class="ranking-position">
                            ${index < 3 ? ['ü•á', 'ü•à', 'ü•â'][index] : `#${index + 1}`}
                        </div>
                        <div class="ranking-employee">
                            <strong class="ranking-name">${emp.tenNhanVien}</strong>
                            <span class="ranking-dept">${this.getDepartmentName(emp.department)}</span>
                        </div>
                        <div class="ranking-metrics">
                            <span class="ranking-revenue">${formatCurrency(emp.totalRevenue)}</span>
                            <span class="ranking-performance ${emp.performanceLevel}">${emp.performanceRatio.toFixed(1)}%</span>
                        </div>
                    </div>
                `).join('')}
            </div>
        `;
    }

    // Setup Event Listeners
        content.innerHTML = `
            <div class="employee-detail-grid">
                <div class="detail-item">
                    <label>T√™n nh√¢n vi√™n:</label>
                    <span>${employee.tenNhanVien}</span>
                </div>
                <div class="detail-item">
                    <label>M√£ nh√¢n vi√™n:</label>
                    <span>${employee.maNhanVien}</span>
                </div>
                <div class="detail-item">
                    <label>Ph√≤ng ban:</label>
                    <span>${this.getDepartmentName(employee.department)}</span>
                </div>
                <div class="detail-item">
                    <label>X·∫øp h·∫°ng:</label>
                    <span>#${employee.rank}</span>
                </div>
                <div class="detail-item">
                    <label>Doanh thu:</label>
                    <span class="positive">${formatCurrency(employee.totalRevenue)}</span>
                </div>
                <div class="detail-item">
                    <label>Hoa h·ªìng:</label>
                    <span class="positive">${formatCurrency(employee.totalCommission)}</span>
                </div>
                <div class="detail-item">
                    <label>S·ªë giao d·ªãch:</label>
                    <span>${employee.transactionCount}</span>
                </div>
                <div class="detail-item">
                    <label>Gi√° tr·ªã TB/GD:</label>
                    <span>${formatCurrency(employee.avgTransactionValue)}</span>
                </div>
                <div class="detail-item">
                    <label>Hi·ªáu su·∫•t:</label>
                    <span class="${employee.performanceLevel}">${employee.performanceRatio.toFixed(1)}%</span>
                </div>
                <div class="detail-item">
                    <label>Ho·∫°t ƒë·ªông cu·ªëi:</label>
                    <span>${employee.lastActivity ? formatDate(employee.lastActivity) : 'N/A'}</span>
                </div>
            </div>
        `;

        modal.classList.remove('hidden');
    }

    closeEmployeeModal() {
        const modal = document.querySelector('#employeeDetailModal');
        if (modal) {
            modal.classList.add('hidden');
        }
    }

    openKPIModal(employeeCode = null) {
        const modal = document.querySelector('#kpiSettingModal');
        const employeeSelect = document.querySelector('#employeeSelect');
        
        if (!modal || !employeeSelect) return;

        // Populate employee select
        employeeSelect.innerHTML = '<option value="">-- Ch·ªçn nh√¢n vi√™n --</option>' +
            this.employees.map(emp => 
                `<option value="${emp.maNhanVien}"${emp.maNhanVien === employeeCode ? ' selected' : ''}>${emp.tenNhanVien} (${emp.maNhanVien})</option>`
            ).join('');

        // If specific employee, pre-fill data
                break;
        }
    }

    reviewGoals() {
        console.log('Review goals functionality');
    }

    // Utility methods
    updatePagination() {
        const container = document.querySelector('.pagination-container');
        if (!container) return;

        const totalItems = this.filteredEmployees.length;
        const totalPages = Math.ceil(totalItems / this.itemsPerPage);
        
        container.innerHTML = `
            <div class="pagination-info">
                Hi·ªÉn th·ªã ${(this.currentPage - 1) * this.itemsPerPage + 1}-${Math.min(this.currentPage * this.itemsPerPage, totalItems)} 
                trong t·ªïng s·ªë ${totalItems} nh√¢n vi√™n
            </div>
            <div class="pagination-controls">
                <button class="page-btn ${this.currentPage === 1 ? 'disabled' : ''}" 
                        onclick="employeeReport.goToPage(${this.currentPage - 1})" 
                        ${this.currentPage === 1 ? 'disabled' : ''}>‚Äπ</button>
                
                ${Array.from({length: Math.min(5, totalPages)}, (_, i) => {
                    const page = Math.max(1, this.currentPage - 2) + i;
                    if (page <= totalPages) {
                        return `<button class="page-btn ${page === this.currentPage ? 'active' : ''}" 
                                       onclick="employeeReport.goToPage(${page})">${page}</button>`;
                    }
                    return '';
                }).join('')}
                
                <button class="page-btn ${this.currentPage === totalPages ? 'disabled' : ''}" 
                        onclick="employeeReport.goToPage(${this.currentPage + 1})" 
                        ${this.currentPage === totalPages ? 'disabled' : ''}>‚Ä∫</button>
            </div>
        `;
    }

    goToPage(page) {
        this.currentPage = page;
        this.renderEmployeePerformanceTable();
    }

    exportToExcel() {
        const headers = ['Nh√¢n vi√™n', 'M√£ NV', 'Ph√≤ng ban', 'Doanh thu', 'Hoa h·ªìng', 'S·ªë GD', 'TB/GD', 'Hi·ªáu su·∫•t', 'X·∫øp h·∫°ng'];
        const data = [headers];
        
        this.filteredEmployees.forEach(emp => {
            data.push([
                emp.tenNhanVien,
                emp.maNhanVien,
                this.getDepartmentName(emp.department),
                emp.totalRevenue,
                emp.totalCommission,
                emp.transactionCount,
                emp.avgTransactionValue
  });
                `${emp.performanceRatio.toFixed(1)}%`,
                emp.rank
            ]);
        });
        
        const csv = data.map(row => row.join(',')).join('\n');
        const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `employee-report-${new Date().toISOString().split('T')[0]}.csv`;
        link.click();
    }

    showSuccessMessage(message) {
        const successMsg = document.createElement('div');
        successMsg.className = 'success-message';
        successMsg.textContent = message;
        document.body.appendChild(successMsg);
        
        setTimeout(() => {
            if (document.body.contains(successMsg)) {
                document.body.removeChild(successMsg);
            }
        }, 3000);
    }

    async refresh() {
        this.isInitialized = false;
        await this.initialize();
    }
}

// Export instance for global use
export const employeeReport = new EmployeeReportCore();