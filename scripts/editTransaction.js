import { showProcessingModal, closeProcessingModal } from './modalUnified.js';
import { updateState } from './core/stateManager.js';
import { updateTransactionTypeForEdit } from './transactionTypeManager.js';


export async function editTransaction(index, transactionList, fetchSoftwareList, updatePackageList, updateAccountList) {
  // Ki·ªÉm tra index h·ª£p l·ªá v√† l·∫•y giao d·ªãch t∆∞∆°ng ·ª©ng
  if (!transactionList || !Array.isArray(transactionList) || index < 0 || index >= transactionList.length) {
    console.error("Danh s√°ch giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá:", { index, transactionList });
    return;
  }
  const transaction = transactionList[index];
  if (!transaction) {
    console.error("Giao d·ªãch kh√¥ng t·ªìn t·∫°i t·∫°i ch·ªâ s·ªë:", index);
    return;
  }

  // L∆∞u ID giao d·ªãch hi·ªán t·∫°i ƒëang s·ª≠a
  window.currentEditTransactionId = transaction.transactionId;
  // C·∫≠p nh·∫≠t state ƒë·ªÉ ƒë·ªìng b·ªô
  updateState({ currentEditTransactionId: transaction.transactionId });

  // L·∫•y c√°c ph·∫ßn t·ª≠ dropdown v√† input t·ª´ DOM
  const softwareNameSelect = document.getElementById("softwareName");
  const softwarePackageSelect = document.getElementById("softwarePackage");
  const accountNameSelect = document.getElementById("accountName");
  const transactionTypeSelect = document.getElementById("transactionType");

  // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa c√°c tr∆∞·ªùng (ho·∫∑c chu·ªói r·ªóng n·∫øu null/undefined)
  const softwareNameValue = transaction.softwareName || "";
  const softwarePackageValue = transaction.softwarePackage || "";
  const accountNameValue = transaction.accountName || "";
  const transactionTypeValue = transaction.transactionType || "";

  // Thi·∫øt l·∫≠p c√°c bi·∫øn to√†n c·ª•c t·∫°m ƒë·ªÉ gi·ªØ gi√° tr·ªã dropdown hi·ªán t·∫°i
  window.currentSoftwareName = softwareNameValue;
  window.currentSoftwarePackage = softwarePackageValue;
  window.currentAccountName = accountNameValue;

  // ƒêi·ªÅn d·ªØ li·ªáu cho c√°c tr∆∞·ªùng vƒÉn b·∫£n
  document.getElementById("transactionDate").value = transaction.transactionDate;
  document.getElementById("customerName").value = transaction.customerName;
  document.getElementById("customerEmail").value = transaction.customerEmail;
  document.getElementById("customerPhone").value = transaction.customerPhone;
  document.getElementById("duration").value = transaction.duration;
  document.getElementById("startDate").value = transaction.startDate;
  document.getElementById("endDate").value = transaction.endDate;
  document.getElementById("deviceCount").value = transaction.deviceCount;
  document.getElementById("revenue").value = transaction.revenue;
  document.getElementById("note").value = transaction.note;

console.log("üì• editTransaction - g·ªçi fetchSoftwareList v·ªõi:", {
  softwareNameValue,
  softwarePackageValue,
  accountNameValue
});
console.log("üîé typeof fetchSoftwareList =", typeof fetchSoftwareList);
  // ƒê√£ lo·∫°i b·ªè showProcessingModal ƒë·ªÉ tr√°nh tr√πng l·∫∑p v·ªõi uiBlocker

  // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch dropdown v·ªõi c√°c gi√° tr·ªã g·ªëc c·∫ßn gi·ªØ l·∫°i
  await fetchSoftwareList(
    softwareNameValue,
    window.softwareData,
    updatePackageList,
    updateAccountList,
    softwarePackageValue,
    accountNameValue
  );
  
    // ƒê√£ lo·∫°i b·ªè closeProcessingModal ƒë·ªÉ tr√°nh tr√πng l·∫∑p v·ªõi uiBlocker

  // Setup transaction type dropdown for edit mode
  updateTransactionTypeForEdit(transactionTypeValue, transactionTypeValue);
  
  // Lo·∫°i b·ªè c·∫£nh b√°o theo y√™u c·∫ßu c·ªßa user

  // G·∫Øn s·ª± ki·ªán 'change' cho dropdown t√†i kho·∫£n ƒë·ªÉ c·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c t∆∞∆°ng ·ª©ng
  accountNameSelect.addEventListener('change', () => {
    window.currentAccountName = accountNameSelect.value;
  });
}
