import { showProcessingModal } from './showProcessingModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';
import { updateState } from './core/stateManager.js';


export async function editTransaction(index, transactionList, fetchSoftwareList, updatePackageList, updateAccountList) {
  // Ki·ªÉm tra index h·ª£p l·ªá v√† l·∫•y giao d·ªãch t∆∞∆°ng ·ª©ng
  if (!transactionList || !Array.isArray(transactionList) || index < 0 || index >= transactionList.length) {
    console.error("Danh s√°ch giao d·ªãch kh√¥ng h·ª£p l·ªá ho·∫∑c ch·ªâ s·ªë kh√¥ng h·ª£p l·ªá:", { index, transactionList });
    return;
  }
  const transaction = transactionList[index];
  if (!transaction) {
    console.error("Giao d·ªãch kh√¥ng t·ªìn t·∫°i t·∫°i ch·ªâ s·ªë:", index);
    return;
  }

  // L∆∞u ID giao d·ªãch hi·ªán t·∫°i ƒëang s·ª≠a
  window.currentEditTransactionId = transaction.transactionId;
  // C·∫≠p nh·∫≠t state ƒë·ªÉ ƒë·ªìng b·ªô
  updateState({ currentEditTransactionId: transaction.transactionId });

  // L·∫•y c√°c ph·∫ßn t·ª≠ dropdown v√† input t·ª´ DOM
  const softwareNameSelect = document.getElementById("softwareName");
  const softwarePackageSelect = document.getElementById("softwarePackage");
  const accountNameSelect = document.getElementById("accountName");
  const transactionTypeSelect = document.getElementById("transactionType");

  // L·∫•y gi√° tr·ªã hi·ªán t·∫°i c·ªßa c√°c tr∆∞·ªùng (ho·∫∑c chu·ªói r·ªóng n·∫øu null/undefined)
  const softwareNameValue = transaction.softwareName || "";
  const softwarePackageValue = transaction.softwarePackage || "";
  const accountNameValue = transaction.accountName || "";
  const transactionTypeValue = transaction.transactionType || "";

  // Thi·∫øt l·∫≠p c√°c bi·∫øn to√†n c·ª•c t·∫°m ƒë·ªÉ gi·ªØ gi√° tr·ªã dropdown hi·ªán t·∫°i
  window.currentSoftwareName = softwareNameValue;
  window.currentSoftwarePackage = softwarePackageValue;
  window.currentAccountName = accountNameValue;

  // ƒêi·ªÅn d·ªØ li·ªáu cho c√°c tr∆∞·ªùng vƒÉn b·∫£n
  document.getElementById("transactionDate").value = transaction.transactionDate;
  document.getElementById("customerName").value = transaction.customerName;
  document.getElementById("customerEmail").value = transaction.customerEmail;
  document.getElementById("customerPhone").value = transaction.customerPhone;
  document.getElementById("duration").value = transaction.duration;
  document.getElementById("startDate").value = transaction.startDate;
  document.getElementById("endDate").value = transaction.endDate;
  document.getElementById("deviceCount").value = transaction.deviceCount;
  document.getElementById("revenue").value = transaction.revenue;
  document.getElementById("note").value = transaction.note;

console.log("üì• editTransaction - g·ªçi fetchSoftwareList v·ªõi:", {
  softwareNameValue,
  softwarePackageValue,
  accountNameValue
});
console.log("üîé typeof fetchSoftwareList =", typeof fetchSoftwareList);
  // ‚úÖ Hi·ªÉn th·ªã modal "ƒêang t·∫£i"
  showProcessingModal("ƒêang t·∫£i d·ªØ li·ªáu giao d·ªãch...");

  // ‚úÖ C·∫≠p nh·∫≠t danh s√°ch dropdown v·ªõi c√°c gi√° tr·ªã g·ªëc c·∫ßn gi·ªØ l·∫°i
  await fetchSoftwareList(
    softwareNameValue,
    window.softwareData,
    updatePackageList,
    updateAccountList,
    softwarePackageValue,
    accountNameValue
  );
  
    // ‚úÖ ƒê√≥ng modal sau khi load xong
    closeProcessingModal();

  // G√°n lo·∫°i giao d·ªãch (kh√¥ng ph√¢n bi·ªát hoa/th∆∞·ªùng)
  if (transactionTypeSelect) {
    const normalizedType = transactionTypeValue.toLowerCase();
    const matchedOption = Array.from(transactionTypeSelect.options)
                               .find(opt => opt.value.toLowerCase() === normalizedType);
    transactionTypeSelect.value = matchedOption ? matchedOption.value : "";
    
    // Th√™m c·∫£nh b√°o n·∫øu ƒëang s·ª≠a t·ª´ B√°n h√†ng sang Ho√†n ti·ªÅn
    transactionTypeSelect.addEventListener("change", function() {
      if (transaction.transactionType !== "Ho√†n Ti·ªÅn" && this.value === "Ho√†n Ti·ªÅn") {
        alert("‚ö†Ô∏è L∆∞u √Ω: Khi chuy·ªÉn t·ª´ 'B√°n h√†ng' sang 'Ho√†n Ti·ªÅn':\n\n" +
              "1. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông t·∫°o giao d·ªãch ho√†n ti·ªÅn M·ªöI\n" +
              "2. Giao d·ªãch g·ªëc v·∫´n gi·ªØ l√† 'B√°n h√†ng' v·ªõi doanh thu ban ƒë·∫ßu\n" +
              "3. Nh·∫≠p s·ªë ti·ªÅn ho√†n l·∫°i v√†o √¥ Doanh thu (VD: ho√†n 11 VNƒê th√¨ nh·∫≠p 11)\n" +
              "4. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông chuy·ªÉn th√†nh s·ªë √¢m (-11)\n\n" +
              "üí° V√≠ d·ª•: Giao d·ªãch g·ªëc 1122 VNƒê, ho√†n l·∫°i 11 VNƒê:\n" +
              "- Giao d·ªãch g·ªëc: +1122 VNƒê\n" +
              "- Giao d·ªãch ho√†n ti·ªÅn: -11 VNƒê\n" +
              "- T·ªïng th·ª±c thu: 1111 VNƒê");
      }
    });
  }

  // G·∫Øn s·ª± ki·ªán 'change' cho dropdown t√†i kho·∫£n ƒë·ªÉ c·∫≠p nh·∫≠t bi·∫øn to√†n c·ª•c t∆∞∆°ng ·ª©ng
  accountNameSelect.addEventListener('change', () => {
    window.currentAccountName = accountNameSelect.value;
  });
}
