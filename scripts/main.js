// Khai b√°o c√°c bi·∫øn v√† thi·∫øt l·∫≠p ban ƒë·∫ßu
window.userInfo = null;
window.currentEditIndex = -1;
window.currentEditTransactionId = null;
window.transactionList = [];
window.today = new Date();
window.todayFormatted = `${window.today.getFullYear()}/${String(window.today.getMonth() + 1).padStart(2, '0')}/${String(window.today.getDate()).padStart(2, '0')}`;
window.currentPage = 1;
window.itemsPerPage = 50;
window.softwareData = [];
window.confirmCallback = null;
window.currentSoftwareName = "";
window.currentSoftwarePackage = "";
window.currentAccountName = "";

// Import c√°c module c·∫ßn thi·∫øt
import { getConstants } from './constants.js';
import { calculateEndDate } from './calculateEndDate.js';
import { logout } from './logout.js';
import { updateAccountList } from './updateAccountList.js';
import { openCalendar } from './openCalendar.js';
import { updateCustomerInfo } from './updateCustomerInfo.js';
import { showProcessingModal } from './showProcessingModal.js';
import { showResultModal } from './showResultModal.js';
import { closeProcessingModal } from './closeProcessingModal.js';
import { handleReset } from './handleReset.js';
import { formatDate } from './formatDate.js';
import { handleAdd } from './handleAdd.js';
import { handleUpdate } from './handleUpdate.js';
import { handleSearch } from './handleSearch.js';
import { loadTransactions } from './loadTransactions.js';
import { updateTable } from './updateTable.js';
import { viewTransaction } from './viewTransaction.js';
import { copyToClipboard } from './copyToClipboard.js';
import { closeModal } from './closeModal.js';
import { updatePagination, firstPage, prevPage, nextPage, lastPage, goToPage } from './pagination.js';
import { editTransaction } from './editTransaction.js';
import { deleteTransaction } from './deleteTransaction.js';
import { fetchSoftwareList } from './fetchSoftwareList.js';
import { updatePackageList } from './updatePackageList.js';
import { editRow, deleteRow } from './legacy.js';
import { handleAddExpense } from './handleAddExpense.js';
import { initExpenseDropdowns } from './initExpenseDropdowns.js';
import { renderExpenseStats } from './renderExpenseStats.js';
import { editExpenseRow } from './editExpenseRow.js';
import { handleDeleteExpense } from './handleDeleteExpense.js';
import { handleUpdateExpense } from './handleUpdateExpense.js';
import { viewExpenseRow } from './viewExpenseRow.js';
import { handleSearchExpense } from './handleSearchExpense.js';
import { initTotalDisplay } from './updateTotalDisplay.js';
import { initStatistics, updateStatistics, loadEmployeeFilter } from './statisticsHandler.js';
import { handleChangePassword, closeChangePasswordModal, confirmChangePassword } from './handleChangePassword.js';
import { formatDateTime } from './formatDateTime.js';
import { openConfirmModal, closeConfirmModal, confirmDelete } from './confirmModal.js';
import {
  openAddOrUpdateModal,
  closeAddOrUpdateModal,
  handleAddNewTransaction,
  handleUpdateTransactionFromModal,
  handleCancelModal
} from './handleAddOrUpdateModal.js';
import {
  handleUpdateCookie,
  confirmUpdateCookie,
  cancelUpdateCookie,
  copyCurrentCookie,
  closeUpdateCookieModal
} from './handleUpdateCookie.js';

// ‚úÖ Import module load tab content
import { loadTabContent, waitForTabsLoaded } from './loadTabContent.js';

// Th·ª±c hi·ªán khi DOMContentLoaded
document.addEventListener("DOMContentLoaded", async () => {

  window.isExpenseSearching = false;
  window.expenseList = [];

  const userData = localStorage.getItem("employeeInfo");
  try {
    window.userInfo = userData ? JSON.parse(userData) : null;
  } catch (e) {
    window.userInfo = null;
  }

  if (!window.userInfo) {
    window.location.href = "index.html";
    return;
  }

  // ‚úÖ Load n·ªôi dung c√°c tab t·ª´ file ri√™ng TR∆Ø·ªöC KHI kh·ªüi t·∫°o
  console.log('üîÑ B·∫Øt ƒë·∫ßu load tab content...');
  await loadTabContent();
  
  // ‚úÖ Ch·ªù cho ƒë·∫øn khi c√°c tab ƒë∆∞·ª£c load xong
  await waitForTabsLoaded();
  console.log('‚úÖ Tab content ƒë√£ s·∫µn s√†ng');

  // ‚úÖ Kh·ªüi t·∫°o h·ªá th·ªëng hi·ªÉn th·ªã t·ªïng s·ªë
  initTotalDisplay();

  document.getElementById("userWelcome").textContent =
  `Xin ch√†o ${window.userInfo.tenNhanVien} (${window.userInfo.maNhanVien}) - ${window.userInfo.vaiTro}`;

  const startDateInput = document.getElementById("startDate");
  const durationInput = document.getElementById("duration");
  const endDateInput = document.getElementById("endDate");
  const transactionDateInput = document.getElementById("transactionDate");

  // ‚úÖ Ki·ªÉm tra xem c√°c element c√≥ t·ªìn t·∫°i kh√¥ng tr∆∞·ªõc khi s·ª≠ d·ª•ng
  if (startDateInput && durationInput && endDateInput && transactionDateInput) {
    startDateInput.value = window.todayFormatted;
    transactionDateInput.value = window.todayFormatted;

    startDateInput.addEventListener("change", () =>
      calculateEndDate(startDateInput, durationInput, endDateInput)
    );
    durationInput.addEventListener("input", () =>
      calculateEndDate(startDateInput, durationInput, endDateInput)
    );
  } else {
    console.warn('‚ö†Ô∏è M·ªôt s·ªë element c·ªßa form giao d·ªãch ch∆∞a s·∫µn s√†ng');
  }

  await fetchSoftwareList(null, window.softwareData, updatePackageList, updateAccountList);
  await initExpenseDropdowns();

  // ‚úÖ Ki·ªÉm tra element t·ªìn t·∫°i tr∆∞·ªõc khi add event listener
  const softwareNameSelect = document.getElementById("softwareName");
  const softwarePackageSelect = document.getElementById("softwarePackage");
  
  if (softwareNameSelect && softwarePackageSelect) {
    softwareNameSelect.addEventListener("change", () =>
      updatePackageList(window.softwareData, null, updateAccountList)
    );
    softwarePackageSelect.addEventListener("change", () =>
      updateAccountList(window.softwareData, null)
    );
  }

  window.loadTransactions();

  // ‚úÖ Th√™m ph·∫ßn kh·ªüi t·∫°o tab th·ªëng k√™
  console.log('üîÑ Kh·ªüi t·∫°o tab th·ªëng k√™...');
  await loadEmployeeFilter();
    
  // ‚úÖ X·ª≠ l√Ω tab switching v·ªõi ki·ªÉm tra element t·ªìn t·∫°i
  document.querySelectorAll(".tab-button").forEach(button => {
    button.addEventListener("click", () => {
      const selectedTab = button.dataset.tab;

      // 1. K√≠ch ho·∫°t n√∫t
      document.querySelectorAll(".tab-button").forEach(btn =>
        btn.classList.remove("active")
      );
      button.classList.add("active");

      // 2. ·∫®n t·∫•t c·∫£ tab content
      document.querySelectorAll(".tab-content").forEach(content =>
        content.classList.remove("active")
      );

      // 3. Hi·ªán tab t∆∞∆°ng ·ª©ng
      const target = document.getElementById(selectedTab);
      if (target) {
        target.classList.add("active");
      }

      const transactionSection = document.getElementById("transactionSection");
      if (transactionSection) {
        if (selectedTab === "tab-giao-dich") {
          transactionSection.style.display = "block";
        } else {
          transactionSection.style.display = "none";
        }
      }

      // ‚úÖ X·ª≠ l√Ω logic ri√™ng cho t·ª´ng tab
      if (selectedTab === "tab-giao-dich") {
        console.log("üîÑ Chuy·ªÉn sang tab giao d·ªãch - refresh b·∫£ng");
        window.loadTransactions();
      } else if (selectedTab === "tab-chi-phi") {
        console.log("üîÑ Chuy·ªÉn sang tab chi ph√≠ - refresh b·∫£ng");
        renderExpenseStats();
      } else if (selectedTab === "tab-thong-ke") {
        // ‚úÖ QUAN TR·ªåNG: Kh·ªüi t·∫°o th·ªëng k√™ khi chuy·ªÉn sang tab
        console.log("üîÑ Chuy·ªÉn sang tab th·ªëng k√™ - kh·ªüi t·∫°o th·ªëng k√™");
        initStatistics();
        updateStatistics();
      }
    });

    // ‚úÖ Th√™m logic ·∫©n/hi·ªán tab d·ª±a tr√™n quy·ªÅn (di chuy·ªÉn v√†o trong forEach)
    const tabNhinThay = window.userInfo.tabNhinThay || "t·∫•t c·∫£";
    const allowedTabs = tabNhinThay.toLowerCase().split(",").map(t => t.trim());
    
    if (tabNhinThay !== "t·∫•t c·∫£") {
      const tabName = button.dataset.tab;
      let tabKey = "";
      
      if (tabName === "tab-giao-dich") tabKey = "giao d·ªãch";
      else if (tabName === "tab-chi-phi") tabKey = "chi ph√≠";
      else if (tabName === "tab-thong-ke") tabKey = "th·ªëng k√™";
      
      if (tabKey && !allowedTabs.includes(tabKey)) {
        button.style.display = "none";
      }
    }
  });
  
  // ‚úÖ Chuy·ªÉn ƒë·∫øn tab ƒë·∫ßu ti√™n ƒë∆∞·ª£c ph√©p n·∫øu tab hi·ªán t·∫°i b·ªã ·∫©n
  const tabNhinThay = window.userInfo.tabNhinThay || "t·∫•t c·∫£";
  if (tabNhinThay !== "t·∫•t c·∫£") {
    const activeTab = document.querySelector(".tab-button.active");
    if (activeTab && activeTab.style.display === "none") {
      const firstVisibleTab = document.querySelector(".tab-button:not([style*='display: none'])");
      if (firstVisibleTab) {
        activeTab.classList.remove("active");
        firstVisibleTab.classList.add("active");
        firstVisibleTab.click();
      }
    }
  }

  // ‚úÖ N·∫øu tab th·ªëng k√™ active ngay t·ª´ ƒë·∫ßu
  const activeTab = document.querySelector(".tab-button.active");
  if (activeTab && activeTab.dataset.tab === "tab-thong-ke") {
    console.log("üîÑ Tab th·ªëng k√™ active t·ª´ ƒë·∫ßu - kh·ªüi t·∫°o");
    setTimeout(() => {
      initStatistics();
      updateStatistics();
    }, 1000);
  }

  // ‚úÖ Kh·ªüi t·∫°o gi√° tr·ªã cho tab chi ph√≠ n·∫øu element t·ªìn t·∫°i
  const expenseDateInput = document.getElementById("expenseDate");
  const expenseRecorderInput = document.getElementById("expenseRecorder");
  
  if (expenseDateInput) {
    expenseDateInput.value = window.todayFormatted;
  }
  if (expenseRecorderInput) {
    expenseRecorderInput.value = window.userInfo?.tenNhanVien || "";
  }
  
  // ‚úÖ G·ªçi handleRecurringChange n·∫øu h√†m t·ªìn t·∫°i
  if (typeof window.handleRecurringChange === 'function') {
    window.handleRecurringChange();
  }
});

// ‚úÖ G√°n c√°c h√†m v√†o window object (di chuy·ªÉn ra ngo√†i DOMContentLoaded)
window.logout = logout;
window.openCalendar = (inputId) =>
  openCalendar(inputId, calculateEndDate, document.getElementById("startDate"), document.getElementById("duration"), document.getElementById("endDate"));
window.updateCustomerInfo = () => updateCustomerInfo(window.transactionList);
window.handleReset = () =>
  handleReset(fetchSoftwareList, showProcessingModal, showResultModal, window.todayFormatted, updatePackageList, updateAccountList);
window.loadTransactions = () =>
  loadTransactions(window.userInfo, updateTable, formatDate, editTransaction, window.deleteTransaction, viewTransaction);
window.handleAdd = () =>
  handleAdd(window.userInfo, window.currentEditTransactionId, window.loadTransactions, window.handleReset, updatePackageList, showProcessingModal, showResultModal);
window.handleUpdate = () =>
  handleUpdate(window.userInfo, window.currentEditTransactionId, window.transactionList, window.loadTransactions, window.handleReset, showProcessingModal, showResultModal, getConstants, updateTable, formatDate, editTransaction, window.deleteTransaction, viewTransaction, fetchSoftwareList, updatePackageList, updateAccountList);
window.handleSearch = () =>
  handleSearch(window.userInfo, window.transactionList, showProcessingModal, showResultModal, updateTable, formatDate, editTransaction, window.deleteTransaction, viewTransaction);
window.viewTransaction = (index) =>
  viewTransaction(index, window.transactionList, formatDate, copyToClipboard);
window.editTransaction = (index) => {
  editTransaction(index, window.transactionList, fetchSoftwareList, updatePackageList, updateAccountList);
};
window.deleteTransaction = (index) =>
  deleteTransaction(
    index,
    window.transactionList,
    window.userInfo,
    window.loadTransactions,
    window.handleReset,
    showProcessingModal,
    showResultModal,
    openConfirmModal,
    getConstants
  );
  
window.handleUpdateCookie = (index) =>
  handleUpdateCookie(index, window.transactionList);
window.handleChangePassword = handleChangePassword; // ‚úÖ S·ª≠a: b·ªè d√≤ng duplicate
window.handleAddExpense = handleAddExpense;
window.closeChangePasswordModal = closeChangePasswordModal;
window.confirmChangePassword = confirmChangePassword;
window.confirmUpdateCookie = confirmUpdateCookie;
window.cancelUpdateCookie = cancelUpdateCookie;
window.copyCurrentCookie = copyCurrentCookie;
window.closeUpdateCookieModal = closeUpdateCookieModal;
window.editExpenseRow = editExpenseRow;
window.handleDeleteExpense = handleDeleteExpense;
window.handleUpdateExpense = handleUpdateExpense;
window.viewExpenseRow = viewExpenseRow;
window.handleSearchExpense = () => handleSearchExpense();
window.currentExpensePage = 1;
window.editRow = (index) => editRow(index, window.transactionList);
window.deleteRow = (index) => deleteRow(index, window.deleteTransaction);
window.closeModal = closeModal;
window.confirmDelete = confirmDelete;
window.closeProcessingModal = closeProcessingModal;
window.firstPage = firstPage;
window.prevPage = prevPage;
window.nextPage = nextPage;
window.lastPage = lastPage;
window.goToPage = goToPage;