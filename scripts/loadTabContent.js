// loadTabContent.js - Qu·∫£n l√Ω load n·ªôi dung c√°c tab t·ª´ file ri√™ng (C·∫£i thi·ªán)

/**
 * Load n·ªôi dung c√°c tab t·ª´ file HTML ri√™ng bi·ªát
 */
export async function loadTabContent() {
  const tabContainer = document.getElementById('tab-content-container');
  
  if (!tabContainer) {
    console.error('‚ùå Kh√¥ng t√¨m th·∫•y tab-content-container');
    return;
  }

  try {
    console.log('üîÑ B·∫Øt ƒë·∫ßu load n·ªôi dung c√°c tab...');
    
    // ‚úÖ Load t·ª´ng tab ri√™ng l·∫ª ƒë·ªÉ d·ªÖ debug
    const tabResults = await loadIndividualTabs();
    
    // ‚úÖ X·ª≠ l√Ω v√† clean content tr∆∞·ªõc khi insert
    const cleanedContent = processTabContent(tabResults);
    
    // ‚úÖ Insert content m·ªôt c√°ch an to√†n
    insertTabContent(tabContainer, cleanedContent);
    
    console.log('‚úÖ ƒê√£ load th√†nh c√¥ng t·∫•t c·∫£ tab content');
    
    // Trigger event ƒë·ªÉ th√¥ng b√°o c√°c tab ƒë√£ load xong
    document.dispatchEvent(new CustomEvent('tabsLoaded'));
    
  } catch (error) {
    console.error('‚ùå L·ªói khi load tab content:', error);
    
    // Fallback: s·ª≠ d·ª•ng n·ªôi dung m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng load ƒë∆∞·ª£c file ri√™ng
    tabContainer.innerHTML = getFallbackContent();
    console.log('üîÑ ƒê√£ s·ª≠ d·ª•ng fallback content');
  }
}

/**
 * Load t·ª´ng tab ri√™ng l·∫ª ƒë·ªÉ d·ªÖ debug
 */
async function loadIndividualTabs() {
  const tabConfigs = [
    { name: 'giao-dich', file: 'tab-giao-dich.html' },
    { name: 'chi-phi', file: 'tab-chi-phi.html' },
    { name: 'thong-ke', file: 'tab-thong-ke.html' }
  ];
  
  const results = {};
  
  for (const config of tabConfigs) {
    try {
      console.log(`üìÇ Loading ${config.name}...`);
      
      const response = await fetch(config.file);
      
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      
      const content = await response.text();
      
      // ‚úÖ Validate content
      if (!content || content.trim().length === 0) {
        throw new Error(`File ${config.file} tr·ªëng`);
      }
      
      results[config.name] = {
        content: content,
        file: config.file,
        loaded: true
      };
      
      console.log(`‚úÖ Loaded ${config.name}: ${content.length} chars`);
      
    } catch (error) {
      console.error(`‚ùå L·ªói load ${config.name}:`, error);
      
      results[config.name] = {
        content: getFallbackTabContent(config.name),
        file: config.file,
        loaded: false,
        error: error.message
      };
    }
  }
  
  return results;
}

/**
 * X·ª≠ l√Ω v√† clean n·ªôi dung tab
 */
function processTabContent(tabResults) {
  const processedContent = {};
  
  for (const [tabName, result] of Object.entries(tabResults)) {
    let content = result.content;
    
    // ‚úÖ Lo·∫°i b·ªè CSS inline n·∫øu c√≥ (nguy√™n nh√¢n g√¢y l·ªói)
    content = removeCSSBlocks(content);
    
    // ‚úÖ Clean up whitespace
    content = content.trim();
    
    // ‚úÖ Validate HTML structure
    if (!isValidTabContent(content, tabName)) {
      console.warn(`‚ö†Ô∏è Tab ${tabName} c√≥ c·∫•u tr√∫c kh√¥ng h·ª£p l·ªá`);
      content = getFallbackTabContent(tabName);
    }
    
    processedContent[tabName] = content;
  }
  
  return processedContent;
}

/**
 * Lo·∫°i b·ªè CSS blocks kh·ªèi HTML ƒë·ªÉ tr√°nh render nh∆∞ text
 */
function removeCSSBlocks(htmlContent) {
  // ‚úÖ Lo·∫°i b·ªè t·∫•t c·∫£ <style> tags v√† n·ªôi dung b√™n trong
  const withoutStyle = htmlContent.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');
  
  // ‚úÖ Lo·∫°i b·ªè CSS orphan (CSS kh√¥ng trong style tag)
  const withoutOrphanCSS = withoutStyle.replace(/^\s*[.#][a-zA-Z-][^{]*\{[^}]*\}/gm, '');
  
  return withoutOrphanCSS;
}

/**
 * Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa n·ªôi dung tab
 */
function isValidTabContent(content, tabName) {
  // Ki·ªÉm tra c√≥ div v·ªõi ID t∆∞∆°ng ·ª©ng kh√¥ng
  const expectedId = `tab-${tabName.replace('-', '-')}`;
  const regex = new RegExp(`<div[^>]+id=["']${expectedId}["']`, 'i');
  
  return regex.test(content);
}

/**
 * Insert content m·ªôt c√°ch an to√†n
 */
function insertTabContent(container, processedContent) {
  // ‚úÖ Clear container tr∆∞·ªõc
  container.innerHTML = '';
  
  // ‚úÖ Create document fragment ƒë·ªÉ tr√°nh multiple reflow
  const fragment = document.createDocumentFragment();
  
  // ‚úÖ Insert t·ª´ng tab
  Object.values(processedContent).forEach(content => {
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = content;
    
    // Move all child nodes to fragment
    while (tempDiv.firstChild) {
      fragment.appendChild(tempDiv.firstChild);
    }
  });
  
  // ‚úÖ Single DOM update
  container.appendChild(fragment);
}

/**
 * Fallback content cho t·ª´ng tab ri√™ng
 */
function getFallbackTabContent(tabName) {
  switch (tabName) {
    case 'giao-dich':
      return `
        <div id="tab-giao-dich" class="tab-content active">
          <form id="transactionForm" class="form-grid fixed-header" onreset="handleReset()">
            <div>
              <label>Ng√†y giao d·ªãch:</label>
              <div class="date-input-container">
                <input type="text" id="transactionDate" placeholder="yyyy/mm/dd">
                <i class="fas fa-calendar-alt calendar-icon" onclick="openCalendar('transactionDate')"></i>
              </div>
            </div>
            <div>
              <label>Lo·∫°i giao d·ªãch:</label>
              <select id="transactionType" required>
                <option value="">-- Ch·ªçn lo·∫°i --</option>
                <option value="B√°n h√†ng">B√°n h√†ng</option>
                <option value="Ho√†n Ti·ªÅn">Ho√†n Ti·ªÅn</option>
                <option value="D√πng th·ª≠">D√πng th·ª≠</option>
                <option value="Nh·∫≠p h√†ng">Nh·∫≠p h√†ng</option>
              </select>
            </div>
            <div>
              <label>Email:</label>
              <input type="email" id="customerEmail">
            </div>
            <div>
              <label>T√™n kh√°ch h√†ng:</label>
              <div class="search-icon-container">
                <input type="text" id="customerName">
                <i class="fas fa-search search-icon" onclick="updateCustomerInfo()"></i>
              </div>
            </div>
            <div>
              <label>Li√™n h·ªá:</label>
              <input type="text" id="customerPhone">
            </div>
            <div>
              <label>S·ªë th√°ng ƒëƒÉng k√Ω:</label>
              <input type="number" id="duration">
            </div>
            <div>
              <label>Ng√†y b·∫Øt ƒë·∫ßu:</label>
              <div class="date-input-container">
                <input type="text" id="startDate" placeholder="yyyy/mm/dd">
                <i class="fas fa-calendar-alt calendar-icon" onclick="openCalendar('startDate')"></i>
              </div>
            </div>
            <div>
              <label>Ng√†y k·∫øt th√∫c:</label>
              <div class="date-input-container">
                <input type="text" id="endDate" placeholder="yyyy/mm/dd">
                <i class="fas fa-calendar-alt calendar-icon" onclick="openCalendar('endDate')"></i>
              </div>
            </div>
            <div>
              <label>S·ªë thi·∫øt b·ªã:</label>
              <input type="number" id="deviceCount">
            </div>
            <div>
              <label>Ghi ch√∫:</label>
              <textarea id="note" rows="2"></textarea>
            </div>
            <div>
              <label>T√™n ph·∫ßn m·ªÅm:</label>
              <select id="softwareName">
                <option value="">-- Ch·ªçn ph·∫ßn m·ªÅm --</option>
              </select>
            </div>
            <div>
              <label>G√≥i ph·∫ßn m·ªÅm:</label>
              <select id="softwarePackage">
                <option value="">-- Ch·ªçn g√≥i --</option>
              </select>
            </div>
            <div>
              <label>T√™n t√†i kho·∫£n:</label>
              <select id="accountName">
                <option value="">-- Ch·ªçn t√†i kho·∫£n --</option>
              </select>
            </div>
            <div>
              <label>Doanh thu:</label>
              <input type="number" id="revenue">
            </div>
            <div class="button-row">
              <button type="button" onclick="handleAdd()">Th√™m</button>
              <button type="button" onclick="handleUpdate()">C·∫≠p nh·∫≠t</button>
              <button type="button" onclick="handleSearch()">T√¨m ki·∫øm</button>
              <button type="reset">L√†m m·ªõi</button>
            </div>
          </form>
        </div>
      `;
      
    case 'chi-phi':
      return `
        <div id="tab-chi-phi" class="tab-content">
          <h3>Tab Chi Ph√≠</h3>
          <p>ƒêang t·∫£i n·ªôi dung...</p>
        </div>
      `;
      
    case 'thong-ke':
      return `
        <div id="tab-thong-ke" class="tab-content">
          <h3>Tab Th·ªëng K√™</h3>
          <p>ƒêang t·∫£i n·ªôi dung...</p>
        </div>
      `;
      
    default:
      return `<div id="tab-${tabName}" class="tab-content"><p>Tab ${tabName} kh√¥ng kh·∫£ d·ª•ng</p></div>`;
  }
}

/**
 * N·ªôi dung d·ª± ph√≤ng t·ªïng th·ªÉ n·∫øu kh√¥ng load ƒë∆∞·ª£c file ri√™ng
 */
function getFallbackContent() {
  return getFallbackTabContent('giao-dich') + 
         getFallbackTabContent('chi-phi') + 
         getFallbackTabContent('thong-ke');
}

/**
 * Ki·ªÉm tra xem c√°c tab ƒë√£ ƒë∆∞·ª£c load ch∆∞a
 */
export function areTabsLoaded() {
  const tabs = ['tab-giao-dich', 'tab-chi-phi', 'tab-thong-ke'];
  return tabs.every(tabId => {
    const element = document.getElementById(tabId);
    return element !== null && element.innerHTML.trim().length > 0;
  });
}

/**
 * Ch·ªù cho ƒë·∫øn khi c√°c tab ƒë∆∞·ª£c load xong
 */
export function waitForTabsLoaded() {
  return new Promise((resolve) => {
    if (areTabsLoaded()) {
      resolve();
      return;
    }
    
    document.addEventListener('tabsLoaded', resolve, { once: true });
    
    // Timeout sau 10 gi√¢y (tƒÉng t·ª´ 5 gi√¢y)
    setTimeout(() => {
      console.warn('‚ö†Ô∏è Tab loading timeout - proceeding anyway');
      resolve();
    }, 10000);
  });
}

/**
 * Debug helper - log tr·∫°ng th√°i loading
 */
export function debugTabLoading() {
  console.log('üîç Tab Loading Debug:');
  
  const tabs = ['tab-giao-dich', 'tab-chi-phi', 'tab-thong-ke'];
  
  tabs.forEach(tabId => {
    const element = document.getElementById(tabId);
    console.log(`  ${tabId}:`, {
      exists: !!element,
      hasContent: element ? element.innerHTML.length > 0 : false,
      contentPreview: element ? element.innerHTML.substring(0, 100) + '...' : 'N/A'
    });
  });
}